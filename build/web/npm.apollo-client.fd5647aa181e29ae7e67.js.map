{"version":3,"sources":["webpack://pbm/./node_modules/apollo-client/node_modules/tslib/tslib.es6.js","webpack://pbm/./node_modules/apollo-client/bundle.esm.js"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","NetworkStatus","isNetworkRequestInFlight","networkStatus","Observable","_super","isNonEmptyArray","isArray","FetchType","ApolloError","_a","err","message","graphQLErrors","networkError","errorMessage","extraInfo","_this","forEach","graphQLError","replace","Error","ObservableQuery","queryManager","options","_b","shouldSubscribe","observer","onSubscribe","observers","Set","subscriptions","isTornDown","variables","queryId","generateQueryId","opDef","query","queryName","name","delete","size","removeQuery","setTimeout","subscription","unsubscribe","error","subscribe","currentResult","getCurrentResult","undefined","data","lastResult","lastError","loading","storeValue","policy","getCurrentQueryResult","partial","queryStoreValue","queryStore","get","fetchPolicy","isNetworkFetchPolicy","errorPolicy","errors","ready","updateLastResult","stale","isDifferentFromLastResult","newResult","snapshot","lastResultSnapshot","getLastResult","getLastError","resetLastResults","resetQueryStoreErrors","refetch","fetchQuery","fetchMore","fetchMoreOptions","updateQuery","combinedOptions","qid","normal","fetchMoreResult","previousResult","stopQuery","subscribeToMore","startGraphQLSubscription","document","subscriptionData","previous","onError","add","setOptions","opts","oldFetchPolicy","pollInterval","startPolling","stopPolling","setVariables","fetchResults","tryFetch","mapFn","getQueryWithPreviousResult","dataStore","markUpdateQueryResult","broadcastQueries","stopPollingQuery","assertNotCacheFirstOrOnly","startPollingQuery","assumeImmutableResults","subObserver","_subscription","_observer","defaultSubscriptionObserverErrorCallback","first","setUpQuery","tearDownQuery","addObservableQuery","iterateObserversSafely","observeQuery","previousResult_1","query_1","fetchPolicy_1","transform","hasClientExports","getLocalState","addExportedVariables","previousVariables","serverQuery","catch","sub","clear","removeObservableQuery","method","argument","observersWithMethod","obs","obsQuery","MutationStore","store","getStore","mutationId","initMutation","mutation","markMutationError","markMutationResult","reset","QueryStore","initQuery","previousQuery","isSetVariables","storePreviousVariables","isPoll","poll","isRefetch","metadata","fetchMoreForQueryId","markQueryResult","markQueryError","markQueryResultClient","complete","observableQueryIds","keys","indexOf","LocalState","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","resolverGroup","setResolvers","getResolvers","runResolvers","remoteResult","context","onlyRunForcedResolvers","_c","resolveDocument","localResult","getFragmentMatcher","clientQuery","prepareContext","getCacheKey","obj","config","dataIdFromObject","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","visit","Directive","enter","node","some","arg","kind","BREAK","diff","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","defaultOperationType","execContext","str","operation","charAt","toUpperCase","slice","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","fragment","typeCondition","resolveField","fieldResult","fragmentResult","all","selections","map","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","__typename","directives","directive","resolveSubSelectedArray","item","multiplex","inner","QueryManager","link","queryDeduplication","onBroadcast","_d","ssrMode","_e","clientAwareness","localState","mutationStore","idCounter","queries","Map","fetchQueryRejectFns","transformCache","WeakMap","inFlightLinkObservables","pollingInfoByQueryId","getCache","stop","_info","stopQueryNoBroadcast","mutate","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","generateUpdateQueriesInfo","self","_f","setQuery","getVariables","ret","observableQuery","updater","markMutationInit","storeResult","getObservableFromLink","markMutationComplete","refetchQueryPromises","refetchQuery","queryOptions","fetchType","isNetworkOnly","needToFetch","shouldFetch","requestId","cancel","networkResult","updateQueryWatch","lastRequestId","invalidated","invalidate","fetchRequest","getQuery","hasForcedResolvers","newData","queryListenerForObserver","invoke","networkStatusChanged","shouldNotifyIfLoading","notifyOnNetworkStatusChange","hasGraphQLErrors","isMissing","errorStatusChanged","diffResult","resultFromStore","has","transformed","transformDocument","forLink","transformForLink","cacheEntry_1","defaultVars","doc","set","watchQuery","transformedOptions","watchedQuery","String","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","listeners","watch","callback","clearStore","resetIds","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","startQuery","makeObservable","markSubscriptionResult","observablePromise_1","observable","x","queryIdOrObservable","foundObserveableQuery","info","id","deduplication","inFlightLinkObservables_1","operationName","forceFetch","byVariables_1","varJson_1","JSON","stringify","cleanup","cleanupSub_1","of","activeNextCount","completed","handler","asyncMap","errorsFromStore","fqrfId","result_1","prev","newInfo","newContext","checkInFlight","interval","maybeFetch_1","poll_1","clearTimeout","timeout","DataStore","initialCache","ignoreErrors","writeWithErrors","write","dataId","optimistic_1","recordOptimisticTransaction","c","orig","cacheWrites_1","updateQueries_1","currentQueryResult","nextQueryResult","mutationResult","queryVariables","performTransaction","removeOptimistic","ApolloClient","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","ssrForceFetchDelay","connectToDevTools","typeDefs","clientAwarenessName","clientAwarenessVersion","version","disableNetworkFetches","bind","window","__APOLLO_CLIENT__","devToolsHookCb","action","state","mutations","dataWithOptimisticResults","extract","readQuery","readFragment","writeQuery","writeFragment","writeData","__actionHookForDevTools","cb","__requestRaw","payload","initQueryManager","fn","onResetStore","filter","onClearStore","restore","serializedState","setLocalStateFragmentMatcher"],"mappings":";0GAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YA8BzB,SAASI,EAAUC,EAASC,EAAYC,EAAGC,GAE9C,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,OAITO,KAAKR,EAAWK,GAClGH,GAAMN,EAAYA,EAAUL,MAAME,EAASC,GAAc,KAAKS,WAI/D,SAASM,EAAYhB,EAASiB,GACjC,IAAsGC,EAAGC,EAAG5B,EAAG6B,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPhC,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOiC,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEV,KAAMgB,EAAK,GAAI,MAASA,EAAK,GAAI,OAAUA,EAAK,IAAwB,mBAAXC,SAA0BP,EAAEO,OAAOC,UAAY,WAAa,OAAO3C,OAAUmC,EACvJ,SAASM,EAAKhC,GAAK,OAAO,SAAUmC,GAAK,OACzC,SAAcC,GACV,GAAIZ,EAAG,MAAM,IAAIa,UAAU,mCAC3B,KAAOV,OACH,GAAIH,EAAI,EAAGC,IAAM5B,EAAY,EAARuC,EAAG,GAASX,EAAU,OAAIW,EAAG,GAAKX,EAAS,SAAO5B,EAAI4B,EAAU,SAAM5B,EAAEM,KAAKsB,GAAI,GAAKA,EAAET,SAAWnB,EAAIA,EAAEM,KAAKsB,EAAGW,EAAG,KAAKhB,KAAM,OAAOvB,EAE3J,OADI4B,EAAI,EAAG5B,IAAGuC,EAAK,CAAS,EAARA,EAAG,GAAQvC,EAAEiB,QACzBsB,EAAG,IACP,KAAK,EAAG,KAAK,EAAGvC,EAAIuC,EAAI,MACxB,KAAK,EAAc,OAAXT,EAAEC,QAAgB,CAAEd,MAAOsB,EAAG,GAAIhB,MAAM,GAChD,KAAK,EAAGO,EAAEC,QAASH,EAAIW,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKT,EAAEI,IAAIO,MAAOX,EAAEG,KAAKQ,MAAO,SACxC,QACI,MAAkBzC,GAAZA,EAAI8B,EAAEG,MAAY5B,OAAS,GAAKL,EAAEA,EAAEK,OAAS,KAAkB,IAAVkC,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAET,EAAI,EAAG,SACjG,GAAc,IAAVS,EAAG,MAAcvC,GAAMuC,EAAG,GAAKvC,EAAE,IAAMuC,EAAG,GAAKvC,EAAE,IAAM,CAAE8B,EAAEC,MAAQQ,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYT,EAAEC,MAAQ/B,EAAE,GAAI,CAAE8B,EAAEC,MAAQ/B,EAAE,GAAIA,EAAIuC,EAAI,MAC7D,GAAIvC,GAAK8B,EAAEC,MAAQ/B,EAAE,GAAI,CAAE8B,EAAEC,MAAQ/B,EAAE,GAAI8B,EAAEI,IAAIQ,KAAKH,GAAK,MACvDvC,EAAE,IAAI8B,EAAEI,IAAIO,MAChBX,EAAEG,KAAKQ,MAAO,SAEtBF,EAAKb,EAAKpB,KAAKG,EAASqB,GAC1B,MAAOV,GAAKmB,EAAK,CAAC,EAAGnB,GAAIQ,EAAI,EAAK,QAAUD,EAAI3B,EAAI,EACtD,GAAY,EAARuC,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAEtB,MAAOsB,EAAG,GAAKA,EAAG,QAAK,EAAQhB,MAAM,GArB9BL,CAAK,CAACf,EAAGmC,M,ICzEzDK,E,qEAUJ,SAASC,EAAyBC,GAC9B,OAAOA,EAAgB,GAV3B,SAAWF,GACPA,EAAcA,EAAuB,QAAI,GAAK,UAC9CA,EAAcA,EAA4B,aAAI,GAAK,eACnDA,EAAcA,EAAyB,UAAI,GAAK,YAChDA,EAAcA,EAAuB,QAAI,GAAK,UAC9CA,EAAcA,EAAoB,KAAI,GAAK,OAC3CA,EAAcA,EAAqB,MAAI,GAAK,QAC5CA,EAAcA,EAAqB,MAAI,GAAK,QAPhD,CAQGA,IAAkBA,EAAgB,KAKrC,IAAIG,EAAc,SAAUC,GAExB,SAASD,IACL,OAAkB,OAAXC,GAAmBA,EAAOxC,MAAMb,KAAMU,YAAcV,KAQ/D,OAVAF,EAAUsD,EAAYC,GAItBD,EAAWlD,UAAU,KAAgB,WACjC,OAAOF,MAEXoD,EAAWlD,UAAU,gBAAkB,WACnC,OAAOF,MAEJoD,EAXM,CAYf,KAEF,SAASE,EAAgB/B,GACrB,OAAO5B,MAAM4D,QAAQhC,IAAUA,EAAMZ,OAAS,EAMlD,IAoCI6C,EApBAC,EAAe,SAAUJ,GAEzB,SAASI,EAAYC,GACjB,IAnB6BC,EAC7BC,EAkBIC,EAAgBH,EAAGG,cAAeC,EAAeJ,EAAGI,aAAcC,EAAeL,EAAGK,aAAcC,EAAYN,EAAGM,UACjHC,EAAQZ,EAAOzC,KAAKZ,KAAM+D,IAAiB/D,KAW/C,OAVAiE,EAAMJ,cAAgBA,GAAiB,GACvCI,EAAMH,aAAeA,GAAgB,KAKjCG,EAAML,QAJLG,IAtBLH,EAAU,GACVN,GAF6BK,EAwBYM,GAtBrBJ,gBACpBF,EAAIE,cAAcK,SAAQ,SAAUC,GAChC,IAAIJ,EAAeI,EACbA,EAAaP,QACb,2BACNA,GAAW,kBAAoBG,EAAe,QAGlDJ,EAAIG,eACJF,GAAW,kBAAoBD,EAAIG,aAAaF,QAAU,MAE9DA,EAAUA,EAAQQ,QAAQ,MAAO,KAgB7BH,EAAMD,UAAYA,EAClBC,EAAMvE,UAAY+D,EAAYvD,UACvB+D,EAEX,OAhBAnE,EAAU2D,EAAaJ,GAgBhBI,EAjBO,CAkBhBY,QAGF,SAAWb,GACPA,EAAUA,EAAkB,OAAI,GAAK,SACrCA,EAAUA,EAAmB,QAAI,GAAK,UACtCA,EAAUA,EAAgB,KAAI,GAAK,OAHvC,CAIGA,IAAcA,EAAY,KAE7B,IAKIc,EAAmB,SAAUjB,GAE7B,SAASiB,EAAgBZ,GACrB,IAAIa,EAAeb,EAAGa,aAAcC,EAAUd,EAAGc,QAASC,EAAKf,EAAGgB,gBAAiBA,OAAyB,IAAPD,GAAuBA,EACxHR,EAAQZ,EAAOzC,KAAKZ,MAAM,SAAU2E,GACpC,OAAOV,EAAMW,YAAYD,OACvB3E,KACNiE,EAAMY,UAAY,IAAIC,IACtBb,EAAMc,cAAgB,IAAID,IAC1Bb,EAAMe,YAAa,EACnBf,EAAMO,QAAUA,EAChBP,EAAMgB,UAAYT,EAAQS,WAAa,GACvChB,EAAMiB,QAAUX,EAAaY,kBAC7BlB,EAAMS,gBAAkBA,EACxB,IAAIU,GAAQ,QAAuBZ,EAAQa,OAG3C,OAFApB,EAAMqB,UAAYF,GAASA,EAAMG,MAAQH,EAAMG,KAAKhE,MACpD0C,EAAMM,aAAeA,EACdN,EA+TX,OA/UAnE,EAAUwE,EAAiBjB,GAkB3BiB,EAAgBpE,UAAU0B,OAAS,WAC/B,IAAIqC,EAAQjE,KACZ,OAAO,IAAImB,SAAQ,SAAUC,EAASC,GAClC,IAAIsD,EAAW,CACXlD,KAAM,SAAUG,GACZR,EAAQQ,GACRqC,EAAMY,UAAUW,OAAOb,GAClBV,EAAMY,UAAUY,MACjBxB,EAAMM,aAAamB,YAAYzB,EAAMiB,SAEzCS,YAAW,WACPC,EAAaC,gBACd,IAEPC,MAAOzE,GAEPuE,EAAe3B,EAAM8B,UAAUpB,OAG3CL,EAAgBpE,UAAU8F,cAAgB,WACtC,IAAIpE,EAAS5B,KAAKiG,mBAIlB,YAHoBC,IAAhBtE,EAAOuE,OACPvE,EAAOuE,KAAO,IAEXvE,GAEX0C,EAAgBpE,UAAU+F,iBAAmB,WACzC,GAAIjG,KAAKgF,WAAY,CACjB,IAAIoB,EAAapG,KAAKoG,WACtB,MAAO,CACHD,MAAOnG,KAAKqG,WAAaD,GAAcA,EAAWD,WAAQ,EAC1DL,MAAO9F,KAAKqG,UACZC,SAAS,EACTnD,cAAeF,EAAc6C,OAGrC,IAEIlE,EA9Da2E,EAAYC,EA4DzB9C,EAAK1D,KAAKuE,aAAakC,sBAAsBzG,MAAOmG,EAAOzC,EAAGyC,KAAMO,EAAUhD,EAAGgD,QACjFC,EAAkB3G,KAAKuE,aAAaqC,WAAWC,IAAI7G,KAAKkF,SAExD4B,EAAc9G,KAAKwE,QAAQsC,YAC3BC,EAAuC,iBAAhBD,GACP,aAAhBA,EACJ,GAAIH,EAAiB,CACjB,IAAIxD,EAAgBwD,EAAgBxD,cACpC,GApEaoD,EAoEAI,OAnEN,KADkBH,EAoEKxG,KAAKwE,QAAQwC,eAnE1BR,EAAS,QAC3BD,IAAeA,EAAWzC,cACjB,SAAX0C,GAAqBlD,EAAgBiD,EAAW1C,gBAkEzC,MAAO,CACHsC,UAAM,EACNG,SAAS,EACTnD,cAAeA,EACf2C,MAAO,IAAIrC,EAAY,CACnBI,cAAe8C,EAAgB9C,cAC/BC,aAAc6C,EAAgB7C,gBAItC6C,EAAgB1B,YAChBjF,KAAKwE,QAAQS,UAAY7E,EAASA,EAAS,GAAIJ,KAAKwE,QAAQS,WAAY0B,EAAgB1B,WACxFjF,KAAKiF,UAAYjF,KAAKwE,QAAQS,WAElCrD,EAAS,CACLuE,KAAMA,EACNG,QAASpD,EAAyBC,GAClCA,cAAeA,GAEfwD,EAAgB9C,eAA8C,QAA7B7D,KAAKwE,QAAQwC,cAC9CpF,EAAOqF,OAASN,EAAgB9C,mBAGnC,CACD,IAAIyC,EAAUS,GACTL,GAA2B,eAAhBI,EAChBlF,EAAS,CACLuE,KAAMA,EACNG,QAASA,EACTnD,cAAemD,EAAUrD,EAAcqD,QAAUrD,EAAciE,OAMvE,OAHKR,GACD1G,KAAKmH,iBAAiB/G,EAASA,EAAS,GAAIwB,GAAS,CAAEwF,OAAO,KAE3DhH,EAASA,EAAS,GAAIwB,GAAS,CAAE8E,QAASA,KAErDpC,EAAgBpE,UAAUmH,0BAA4B,SAAUC,GAC5D,IAAIC,EAAWvH,KAAKwH,mBACpB,QAASD,GACLD,GACAC,EAASpE,gBAAkBmE,EAAUnE,eACrCoE,EAASH,QAAUE,EAAUF,QAC7B,OAAQG,EAASpB,KAAMmB,EAAUnB,QAEzC7B,EAAgBpE,UAAUuH,cAAgB,WACtC,OAAOzH,KAAKoG,YAEhB9B,EAAgBpE,UAAUwH,aAAe,WACrC,OAAO1H,KAAKqG,WAEhB/B,EAAgBpE,UAAUyH,iBAAmB,kBAClC3H,KAAKoG,kBACLpG,KAAKwH,0BACLxH,KAAKqG,UACZrG,KAAKgF,YAAa,GAEtBV,EAAgBpE,UAAU0H,sBAAwB,WAC9C,IAAIhB,EAAa5G,KAAKuE,aAAaqC,WAAWC,IAAI7G,KAAKkF,SACnD0B,IACAA,EAAW9C,aAAe,KAC1B8C,EAAW/C,cAAgB,KAGnCS,EAAgBpE,UAAU2H,QAAU,SAAU5C,GAC1C,IAAI6B,EAAc9G,KAAKwE,QAAQsC,YAC/B,MAAoB,eAAhBA,EACO3F,QAAQE,OAA+C,IAAI,KAAe,KAEjE,aAAhByF,GACgB,sBAAhBA,IACAA,EAAc,iBAEb,OAAQ9G,KAAKiF,UAAWA,KACzBjF,KAAKiF,UAAY7E,EAASA,EAAS,GAAIJ,KAAKiF,WAAYA,KAEvD,OAAQjF,KAAKwE,QAAQS,UAAWjF,KAAKiF,aACtCjF,KAAKwE,QAAQS,UAAY7E,EAASA,EAAS,GAAIJ,KAAKwE,QAAQS,WAAYjF,KAAKiF,YAE1EjF,KAAKuE,aAAauD,WAAW9H,KAAKkF,QAAS9E,EAASA,EAAS,GAAIJ,KAAKwE,SAAU,CAAEsC,YAAaA,IAAgBtD,EAAUqE,WAEpIvD,EAAgBpE,UAAU6H,UAAY,SAAUC,GAC5C,IAAI/D,EAAQjE,MAC4B,QAAUgI,EAAiBC,YAAa,GAChF,IAAIC,EAAkB9H,EAASA,EAAS,GAAK4H,EAAiB3C,MAAQ2C,EAAmB5H,EAASA,EAASA,EAAS,GAAIJ,KAAKwE,SAAUwD,GAAmB,CAAE/C,UAAW7E,EAASA,EAAS,GAAIJ,KAAKiF,WAAY+C,EAAiB/C,cAAiB,CAAE6B,YAAa,iBAC3PqB,EAAMnI,KAAKuE,aAAaY,kBAC5B,OAAOnF,KAAKuE,aACPuD,WAAWK,EAAKD,EAAiB1E,EAAU4E,OAAQpI,KAAKkF,SACxDpD,MAAK,SAAUuG,GAQhB,OAPApE,EAAMgE,aAAY,SAAUK,GACxB,OAAON,EAAiBC,YAAYK,EAAgB,CAChDD,gBAAiBA,EAAgBlC,KACjClB,UAAWiD,EAAgBjD,eAGnChB,EAAMM,aAAagE,UAAUJ,GACtBE,KACR,SAAUvC,GAET,MADA7B,EAAMM,aAAagE,UAAUJ,GACvBrC,MAGdxB,EAAgBpE,UAAUsI,gBAAkB,SAAUhE,GAClD,IAAIP,EAAQjE,KACR4F,EAAe5F,KAAKuE,aACnBkE,yBAAyB,CAC1BpD,MAAOb,EAAQkE,SACfzD,UAAWT,EAAQS,YAElBc,UAAU,CACXtE,KAAM,SAAUkH,GACZ,IAAIV,EAAczD,EAAQyD,YACtBA,GACAhE,EAAMgE,aAAY,SAAUW,EAAUlF,GAClC,IAAIuB,EAAYvB,EAAGuB,UACnB,OAAOgD,EAAYW,EAAU,CACzBD,iBAAkBA,EAClB1D,UAAWA,QAK3Ba,MAAO,SAAUnC,GACTa,EAAQqE,SACRrE,EAAQqE,QAAQlF,MAO5B,OADA3D,KAAK+E,cAAc+D,IAAIlD,GAChB,WACC3B,EAAMc,cAAcS,OAAOI,IAC3BA,EAAaC,gBAIzBvB,EAAgBpE,UAAU6I,WAAa,SAAUC,GAC7C,IAAIC,EAAiBjJ,KAAKwE,QAAQsC,YAClC9G,KAAKwE,QAAUpE,EAASA,EAAS,GAAIJ,KAAKwE,SAAUwE,GAChDA,EAAKE,aACLlJ,KAAKmJ,aAAaH,EAAKE,cAEI,IAAtBF,EAAKE,cACVlJ,KAAKoJ,cAET,IAAItC,EAAckC,EAAKlC,YACvB,OAAO9G,KAAKqJ,aAAarJ,KAAKwE,QAAQS,UAAWgE,IAAmBnC,IAAmC,eAAnBmC,GAC7D,YAAnBA,GACgB,iBAAhBnC,GAAiCkC,EAAKM,eAE9ChF,EAAgBpE,UAAUmJ,aAAe,SAAUpE,EAAWsE,EAAUD,GAKpE,YAJiB,IAAbC,IAAuBA,GAAW,QACjB,IAAjBD,IAA2BA,GAAe,GAC9CtJ,KAAKgF,YAAa,EAClBC,EAAYA,GAAajF,KAAKiF,WACzBsE,IAAY,OAAQtE,EAAWjF,KAAKiF,WAC9BjF,KAAK6E,UAAUY,MAAQ6D,EACxBtJ,KAAK4B,SACLT,QAAQC,WAElBpB,KAAKiF,UAAYjF,KAAKwE,QAAQS,UAAYA,EACrCjF,KAAK6E,UAAUY,KAGbzF,KAAKuE,aAAauD,WAAW9H,KAAKkF,QAASlF,KAAKwE,SAF5CrD,QAAQC,YAIvBkD,EAAgBpE,UAAU+H,YAAc,SAAUuB,GAC9C,IAAIjF,EAAevE,KAAKuE,aACpBb,EAAKa,EAAakF,2BAA2BzJ,KAAKkF,SAAUoD,EAAiB5E,EAAG4E,eAAgBrD,EAAYvB,EAAGuB,UAAWyD,EAAWhF,EAAGgF,SACxIpB,GAAY,SAAsB,WAClC,OAAOkC,EAAMlB,EAAgB,CAAErD,UAAWA,OAE1CqC,IACA/C,EAAamF,UAAUC,sBAAsBjB,EAAUzD,EAAWqC,GAClE/C,EAAaqF,qBAGrBtF,EAAgBpE,UAAUkJ,YAAc,WACpCpJ,KAAKuE,aAAasF,iBAAiB7J,KAAKkF,SACxClF,KAAKwE,QAAQ0E,kBAAehD,GAEhC5B,EAAgBpE,UAAUiJ,aAAe,SAAUD,GAC/CY,EAA0B9J,MAC1BA,KAAKwE,QAAQ0E,aAAeA,EAC5BlJ,KAAKuE,aAAawF,kBAAkB/J,KAAKwE,QAASxE,KAAKkF,UAE3DZ,EAAgBpE,UAAUiH,iBAAmB,SAAUG,GACnD,IAAIgB,EAAiBtI,KAAKoG,WAK1B,OAJApG,KAAKoG,WAAakB,EAClBtH,KAAKwH,mBAAqBxH,KAAKuE,aAAayF,uBACtC1C,GACA,QAAUA,GACTgB,GAEXhE,EAAgBpE,UAAU0E,YAAc,SAAUD,GAC9C,IAAIV,EAAQjE,KACZ,IACI,IAAIiK,EAActF,EAASuF,cAAcC,UACrCF,IAAgBA,EAAYnE,QAC5BmE,EAAYnE,MAAQsE,GAG5B,MAAO1G,IACP,IAAI2G,GAASrK,KAAK6E,UAAUY,KAS5B,OARAzF,KAAK6E,UAAUiE,IAAInE,GACfA,EAASlD,MAAQzB,KAAKoG,YACtBzB,EAASlD,KAAKzB,KAAKoG,YACnBzB,EAASmB,OAAS9F,KAAKqG,WACvB1B,EAASmB,MAAM9F,KAAKqG,WACpBgE,GACArK,KAAKsK,aAEF,WACCrG,EAAMY,UAAUW,OAAOb,KAAcV,EAAMY,UAAUY,MACrDxB,EAAMsG,kBAIlBjG,EAAgBpE,UAAUoK,WAAa,WACnC,IAAIrG,EAAQjE,KACGuE,EAANvE,KAAwBuE,aAAcW,EAAtClF,KAAmDkF,QACxDlF,KAAK0E,iBACLH,EAAaiG,mBAAmBtF,EAASlF,MAEzCA,KAAKwE,QAAQ0E,eACbY,EAA0B9J,MAC1BuE,EAAawF,kBAAkB/J,KAAKwE,QAASU,IAEjD,IAAI2D,EAAU,SAAU/C,GACpB7B,EAAMkD,iBAAiB/G,EAASA,EAAS,GAAI6D,EAAMmC,YAAa,CAAEa,OAAQnB,EAAMjC,cAAeV,cAAeF,EAAc6C,MAAOQ,SAAS,KAC5ImE,EAAuBxG,EAAMY,UAAW,QAASZ,EAAMoC,UAAYP,IAEvEvB,EAAamG,aAAaxF,EAASlF,KAAKwE,QAAS,CAC7C/C,KAAM,SAAUG,GACZ,GAAIqC,EAAMoC,WAAapC,EAAMoD,0BAA0BzF,GAAS,CAC5D,IAAI+I,EAAmB1G,EAAMkD,iBAAiBvF,GAC1C8B,EAAKO,EAAMO,QAASoG,EAAUlH,EAAG2B,MAAOJ,EAAYvB,EAAGuB,UAAW4F,EAAgBnH,EAAGoD,YACrFvC,EAAauG,UAAUF,GAASG,iBAChCxG,EAAayG,gBAAgBC,qBAAqBL,EAAS3F,GAAWnD,MAAK,SAAUmD,GACjF,IAAIiG,EAAoBjH,EAAMgB,UAC9BhB,EAAMgB,UAAYhB,EAAMO,QAAQS,UAAYA,GACvCrD,EAAO0E,SACRqE,GACkB,eAAlBE,GACAtG,EAAauG,UAAUF,GAASO,eAC/B,OAAQD,EAAmBjG,GAC5BhB,EAAM4D,UAGN4C,EAAuBxG,EAAMY,UAAW,OAAQjD,MAKxD6I,EAAuBxG,EAAMY,UAAW,OAAQjD,KAI5DkE,MAAO+C,IACRuC,MAAMvC,IAEbvE,EAAgBpE,UAAUqK,cAAgB,WACtC,IAAIhG,EAAevE,KAAKuE,aACxBvE,KAAKgF,YAAa,EAClBT,EAAasF,iBAAiB7J,KAAKkF,SACnClF,KAAK+E,cAAcb,SAAQ,SAAUmH,GAAO,OAAOA,EAAIxF,iBACvD7F,KAAK+E,cAAcuG,QACnB/G,EAAagH,sBAAsBvL,KAAKkF,SACxCX,EAAagE,UAAUvI,KAAKkF,SAC5BlF,KAAK6E,UAAUyG,SAEZhH,EAhVW,CAiVpBlB,GACF,SAASgH,EAAyCtE,IAGlD,SAAS2E,EAAuB5F,EAAW2G,EAAQC,GAC/C,IAAIC,EAAsB,GAC1B7G,EAAUX,SAAQ,SAAUyH,GAAO,OAAOA,EAAIH,IAAWE,EAAoB1I,KAAK2I,MAClFD,EAAoBxH,SAAQ,SAAUyH,GAAO,OAAOA,EAAIH,GAAQC,MAEpE,SAAS3B,EAA0B8B,GAC/B,IAAI9E,EAAc8E,EAASpH,QAAQsC,aACK,QAA0B,gBAAhBA,GAAiD,eAAhBA,EAA8B,GAGrH,IAAI+E,EAAiB,WACjB,SAASA,IACL7L,KAAK8L,MAAQ,GAiCjB,OA/BAD,EAAc3L,UAAU6L,SAAW,WAC/B,OAAO/L,KAAK8L,OAEhBD,EAAc3L,UAAU2G,IAAM,SAAUmF,GACpC,OAAOhM,KAAK8L,MAAME,IAEtBH,EAAc3L,UAAU+L,aAAe,SAAUD,EAAYE,EAAUjH,GACnEjF,KAAK8L,MAAME,GAAc,CACrBE,SAAUA,EACVjH,UAAWA,GAAa,GACxBqB,SAAS,EACTR,MAAO,OAGf+F,EAAc3L,UAAUiM,kBAAoB,SAAUH,EAAYlG,GAC9D,IAAIoG,EAAWlM,KAAK8L,MAAME,GACtBE,IACAA,EAAS5F,SAAU,EACnB4F,EAASpG,MAAQA,IAGzB+F,EAAc3L,UAAUkM,mBAAqB,SAAUJ,GACnD,IAAIE,EAAWlM,KAAK8L,MAAME,GACtBE,IACAA,EAAS5F,SAAU,EACnB4F,EAASpG,MAAQ,OAGzB+F,EAAc3L,UAAUmM,MAAQ,WAC5BrM,KAAK8L,MAAQ,IAEVD,EAnCS,GAsChBS,EAAc,WACd,SAASA,IACLtM,KAAK8L,MAAQ,GAsGjB,OApGAQ,EAAWpM,UAAU6L,SAAW,WAC5B,OAAO/L,KAAK8L,OAEhBQ,EAAWpM,UAAU2G,IAAM,SAAU3B,GACjC,OAAOlF,KAAK8L,MAAM5G,IAEtBoH,EAAWpM,UAAUqM,UAAY,SAAUlH,GACvC,IAAImH,EAAgBxM,KAAK8L,MAAMzG,EAAMH,UACG,SAAWsH,GAC/CA,EAAc9D,WAAarD,EAAMqD,WACjC,OAAQ8D,EAAc9D,SAAUrD,EAAMqD,UAAW,IAGrD,IAUIvF,EAVAsJ,GAAiB,EACjBvB,EAAoB,KACpB7F,EAAMqH,wBACNF,GACAA,EAAcrJ,gBAAkBF,EAAcqD,WACzC,OAAQkG,EAAcvH,UAAWI,EAAMJ,aACxCwH,GAAiB,EACjBvB,EAAoBsB,EAAcvH,YAKtC9B,EADAsJ,EACgBxJ,EAAcoG,aAEzBhE,EAAMsH,OACK1J,EAAc2J,KAEzBvH,EAAMwH,UACK5J,EAAc4E,QAGd5E,EAAcqD,QAElC,IAAIzC,EAAgB,GAChB2I,GAAiBA,EAAc3I,gBAC/BA,EAAgB2I,EAAc3I,eAElC7D,KAAK8L,MAAMzG,EAAMH,SAAW,CACxBwD,SAAUrD,EAAMqD,SAChBzD,UAAWI,EAAMJ,UACjBiG,kBAAmBA,EACnBpH,aAAc,KACdD,cAAeA,EACfV,cAAeA,EACf2J,SAAUzH,EAAMyH,UAEqB,iBAA9BzH,EAAM0H,qBACb/M,KAAK8L,MAAMzG,EAAM0H,uBACjB/M,KAAK8L,MAAMzG,EAAM0H,qBAAqB5J,cAClCF,EAAc8E,YAG1BuE,EAAWpM,UAAU8M,gBAAkB,SAAU9H,EAAStD,EAAQmL,GACzD/M,KAAK8L,OAAU9L,KAAK8L,MAAM5G,KAE/BlF,KAAK8L,MAAM5G,GAASpB,aAAe,KACnC9D,KAAK8L,MAAM5G,GAASrB,cAAgBP,EAAgB1B,EAAOqF,QAAUrF,EAAOqF,OAAS,GACrFjH,KAAK8L,MAAM5G,GAASgG,kBAAoB,KACxClL,KAAK8L,MAAM5G,GAAS/B,cAAgBF,EAAciE,MACf,iBAAxB6F,GACP/M,KAAK8L,MAAMiB,KACX/M,KAAK8L,MAAMiB,GAAqB5J,cAAgBF,EAAciE,SAGtEoF,EAAWpM,UAAU+M,eAAiB,SAAU/H,EAASY,EAAOiH,GACvD/M,KAAK8L,OAAU9L,KAAK8L,MAAM5G,KAE/BlF,KAAK8L,MAAM5G,GAASpB,aAAegC,EACnC9F,KAAK8L,MAAM5G,GAAS/B,cAAgBF,EAAc6C,MACf,iBAAxBiH,GACP/M,KAAKkN,sBAAsBH,GAAqB,KAGxDT,EAAWpM,UAAUgN,sBAAwB,SAAUhI,EAASiI,GAC5D,IAAI5G,EAAavG,KAAK8L,OAAS9L,KAAK8L,MAAM5G,GACtCqB,IACAA,EAAWzC,aAAe,KAC1ByC,EAAW2E,kBAAoB,KAC3BiC,IACA5G,EAAWpD,cAAgBF,EAAciE,SAIrDoF,EAAWpM,UAAUqI,UAAY,SAAUrD,UAChClF,KAAK8L,MAAM5G,IAEtBoH,EAAWpM,UAAUmM,MAAQ,SAAUe,GACnC,IAAInJ,EAAQjE,KACZR,OAAO6N,KAAKrN,KAAK8L,OAAO5H,SAAQ,SAAUgB,GAClCkI,EAAmBE,QAAQpI,GAAW,EACtCjB,EAAMsE,UAAUrD,GAGhBjB,EAAM6H,MAAM5G,GAAS/B,cAAgBF,EAAcqD,YAIxDgG,EAxGM,GA+GbiB,EAAc,WACd,SAASA,EAAW7J,GAChB,IAAI8J,EAAQ9J,EAAG8J,MAAOC,EAAS/J,EAAG+J,OAAQC,EAAYhK,EAAGgK,UAAWC,EAAkBjK,EAAGiK,gBACzF3N,KAAKwN,MAAQA,EACTC,IACAzN,KAAKyN,OAASA,GAEdC,GACA1N,KAAK4N,aAAaF,GAElBC,GACA3N,KAAK6N,mBAAmBF,GA8PhC,OA3PAJ,EAAWrN,UAAU0N,aAAe,SAAUF,GAC1C,IAAIzJ,EAAQjE,KACZA,KAAK0N,UAAY1N,KAAK0N,WAAa,GAC/B/N,MAAM4D,QAAQmK,GACdA,EAAUxJ,SAAQ,SAAU4J,GACxB7J,EAAMyJ,WAAY,QAAUzJ,EAAMyJ,UAAWI,MAIjD9N,KAAK0N,WAAY,QAAU1N,KAAK0N,UAAWA,IAGnDH,EAAWrN,UAAU6N,aAAe,SAAUL,GAC1C1N,KAAK0N,UAAY,GACjB1N,KAAK4N,aAAaF,IAEtBH,EAAWrN,UAAU8N,aAAe,WAChC,OAAOhO,KAAK0N,WAAa,IAE7BH,EAAWrN,UAAU+N,aAAe,SAAUvK,GAC1C,IAAIgF,EAAWhF,EAAGgF,SAAUwF,EAAexK,EAAGwK,aAAcC,EAAUzK,EAAGyK,QAASlJ,EAAYvB,EAAGuB,UAAWR,EAAKf,EAAG0K,uBAAwBA,OAAgC,IAAP3J,GAAwBA,EAC7L,OAAO3D,EAAUd,UAAM,OAAQ,GAAQ,WACnC,OAAO+B,EAAY/B,MAAM,SAAUqO,GAC/B,OAAI3F,EACO,CAAC,EAAG1I,KAAKsO,gBAAgB5F,EAAUwF,EAAa/H,KAAMgI,EAASlJ,EAAWjF,KAAK2N,gBAAiBS,GAAwBtM,MAAK,SAAUyM,GAAe,OAAQnO,EAASA,EAAS,GAAI8N,GAAe,CAAE/H,KAAMoI,EAAY3M,aAE3N,CAAC,EAAGsM,UAIvBX,EAAWrN,UAAU2N,mBAAqB,SAAUF,GAChD3N,KAAK2N,gBAAkBA,GAE3BJ,EAAWrN,UAAUsO,mBAAqB,WACtC,OAAOxO,KAAK2N,iBAEhBJ,EAAWrN,UAAUuO,YAAc,SAAU/F,GACzC,OAAI,QAAc,CAAC,UAAWA,IACtB1I,KAAK0N,UACEhF,EAOR,MAEX6E,EAAWrN,UAAUiL,YAAc,SAAUzC,GACzC,OAAO1I,KAAK0N,WAAY,QAA6BhF,GAAYA,GAErE6E,EAAWrN,UAAUwO,eAAiB,SAAUP,QAC5B,IAAZA,IAAsBA,EAAU,IACpC,IAAIX,EAAQxN,KAAKwN,MAUjB,OATiBpN,EAASA,EAAS,GAAI+N,GAAU,CAAEX,MAAOA,EAAOmB,YAAa,SAAUC,GAChF,GAAIpB,EAAMqB,OACN,OAAOrB,EAAMqB,OAAOC,iBAAiBF,IAGG,SAAU,EAAO,OAMzErB,EAAWrN,UAAU+K,qBAAuB,SAAUvC,EAAUzD,EAAWkJ,GAGvE,YAFkB,IAAdlJ,IAAwBA,EAAY,SACxB,IAAZkJ,IAAsBA,EAAU,IAC7BrN,EAAUd,UAAM,OAAQ,GAAQ,WACnC,OAAO+B,EAAY/B,MAAM,SAAU0D,GAC/B,OAAIgF,EACO,CAAC,EAAG1I,KAAKsO,gBAAgB5F,EAAU1I,KAAK+O,wBAAwBrG,EAAUzD,IAAc,GAAIjF,KAAK0O,eAAeP,GAAUlJ,GAAWnD,MAAK,SAAUqE,GAAQ,OAAQ/F,EAASA,EAAS,GAAI6E,GAAYkB,EAAK6I,uBAE/M,CAAC,EAAG5O,EAAS,GAAI6E,WAIpCsI,EAAWrN,UAAU+O,qBAAuB,SAAUvG,GAClD,IAAIwG,GAAiB,EAiBrB,OAhBA,IAAAC,OAAMzG,EAAU,CACZ0G,UAAW,CACPC,MAAO,SAAUC,GACb,GAAwB,WAApBA,EAAK/J,KAAKhE,OAAsB+N,EAAK5O,YACrCwO,EAAiBI,EAAK5O,UAAU6O,MAAK,SAAUC,GAC3C,MAA0B,WAAnBA,EAAIjK,KAAKhE,OACO,iBAAnBiO,EAAIjO,MAAMkO,OACU,IAApBD,EAAIjO,MAAMA,UAGd,OAAO,EAAAmO,UAMpBR,GAEX3B,EAAWrN,UAAU6O,wBAA0B,SAAUrG,EAAUzD,GAC/D,OAAOjF,KAAKwN,MAAMmC,KAAK,CACnBtK,OAAO,QAA2BqD,GAClCzD,UAAWA,EACX2K,mBAAmB,EACnBC,YAAY,IACbjO,QAEP2L,EAAWrN,UAAUoO,gBAAkB,SAAU5F,EAAUoH,EAAW3B,EAASlJ,EAAW0I,EAAiBS,GAKvG,YAJgB,IAAZD,IAAsBA,EAAU,SAClB,IAAdlJ,IAAwBA,EAAY,SAChB,IAApB0I,IAA8BA,EAAkB,WAAc,OAAO,SAC1C,IAA3BS,IAAqCA,GAAyB,GAC3DtN,EAAUd,UAAM,OAAQ,GAAQ,WACnC,IAAI+P,EAAgBC,EAAWC,EAAaC,EAAqBC,EAAsBzM,EAAI8J,EAAOC,EAAQ2C,EAC1G,OAAOrO,EAAY/B,MAAM,SAAUyE,GAlI/C,IAA+B4L,EAsJf,OAnBAN,GAAiB,QAAkBrH,GACnCsH,GAAY,QAAuBtH,GACnCuH,GAAc,OAAkBD,GAChCE,EAAsBH,EACjBO,UACLH,EAAuBD,GAxIRG,EAyIaH,GAxI7BK,OAAO,GAAGC,cAAgBH,EAAII,MAAM,GAyI7B,QACKjD,GAAX9J,EAAK1D,MAAiBwN,MAAOC,EAAS/J,EAAG+J,OACzC2C,EAAc,CACVH,YAAaA,EACb9B,QAAS/N,EAASA,EAAS,GAAI+N,GAAU,CAAEX,MAAOA,EAC9CC,OAAQA,IACZxI,UAAWA,EACX0I,gBAAiBA,EACjBwC,qBAAsBA,EACtBnB,kBAAmB,GACnBZ,uBAAwBA,GAErB,CAAC,EAAGpO,KAAK0Q,oBAAoBX,EAAeY,aAAcb,EAAWM,GAAatO,MAAK,SAAUF,GAAU,MAAO,CACjHA,OAAQA,EACRoN,kBAAmBoB,EAAYpB,8BAKnDzB,EAAWrN,UAAUwQ,oBAAsB,SAAUC,EAAcb,EAAWM,GAC1E,OAAOtP,EAAUd,UAAM,OAAQ,GAAQ,WACnC,IAAIiQ,EAAa9B,EAASlJ,EAAW2L,EAAgBC,EACjD5M,EAAQjE,KACZ,OAAO+B,EAAY/B,MAAM,SAAU0D,GAqC/B,OApCAuM,EAAcG,EAAYH,YAAa9B,EAAUiC,EAAYjC,QAASlJ,EAAYmL,EAAYnL,UAC9F2L,EAAiB,CAACd,GAClBe,EAAU,SAAUC,GAAa,OAAOhQ,EAAUmD,OAAO,OAAQ,GAAQ,WACrE,IAAI8M,EAAUC,EACd,OAAOjP,EAAY/B,MAAM,SAAU0D,GAC/B,OAAK,QAAcoN,EAAW7L,IAG1B,QAAQ6L,GACD,CAAC,EAAG9Q,KAAKiR,aAAaH,EAAWhB,EAAWM,GAAatO,MAAK,SAAUoP,GACvE,IAAIxN,OACuB,IAAhBwN,GACPN,EAAe5N,OAAMU,EAAK,KACnB,QAAuBoN,IAAcI,EACxCxN,UAIhB,QAAiBoN,GACjBC,EAAWD,GAGXC,EAAWd,EAAYa,EAAUvL,KAAKhE,QACE,QAAUwP,EAAU,IAE5DA,GAAYA,EAASC,gBACrBA,EAAgBD,EAASC,cAAczL,KAAKhE,MACxC6O,EAAYzC,gBAAgBmC,EAAWkB,EAAe7C,IAC/C,CAAC,EAAGnO,KAAK0Q,oBAAoBK,EAASJ,aAAcb,EAAWM,GAAatO,MAAK,SAAUqP,GAC1FP,EAAe5N,KAAKmO,OAI7B,CAAC,IA3BG,CAAC,UA8Bb,CAAC,EAAGhQ,QAAQiQ,IAAIT,EAAaU,WAAWC,IAAIT,IAAU/O,MAAK,WAC1D,OAAO,QAAe8O,cAK1CrD,EAAWrN,UAAU+Q,aAAe,SAAUM,EAAOzB,EAAWM,GAC5D,OAAOtP,EAAUd,UAAM,OAAQ,GAAQ,WACnC,IAAIiF,EAAWuM,EAAWC,EAAkBC,EAAWC,EAAeC,EAAeC,EAAcC,EAAa1Q,EAC5G6C,EAAQjE,KACZ,OAAO+B,EAAY/B,MAAM,SAAU0D,GAkB/B,OAjBAuB,EAAYmL,EAAYnL,UACxBuM,EAAYD,EAAMhM,KAAKhE,MACvBkQ,GAAmB,QAAuBF,GAC1CG,EAAYF,IAAcC,EAC1BE,EAAgB7B,EAAU2B,IAAqB3B,EAAU0B,GACzDI,EAAgBzQ,QAAQC,QAAQuQ,GAC3BvB,EAAYhC,yBACbpO,KAAKiP,qBAAqBsC,KAC1BM,EAAe/B,EAAUiC,YAAc3B,EAAYD,sBACnD2B,EAAc9R,KAAK0N,WAAa1N,KAAK0N,UAAUmE,MAE3CzQ,EAAU0Q,EAAYJ,EAAYF,EAAYC,MAE1CG,EAAgBzQ,QAAQC,QAAQA,EAAQ0O,GAAW,QAAyByB,EAAOtM,GAAYmL,EAAYjC,QAAS,CAAEoD,MAAOA,EAAOtB,YAAaG,EAAYH,iBAIlK,CAAC,EAAG2B,EAAc9P,MAAK,SAAUF,GAahC,YAZe,IAAXA,IAAqBA,EAAS+P,GAC9BJ,EAAMS,YACNT,EAAMS,WAAW9N,SAAQ,SAAU+N,GACF,WAAzBA,EAAU1M,KAAKhE,OAAsB0Q,EAAUvR,WAC/CuR,EAAUvR,UAAUwD,SAAQ,SAAUsL,GACX,OAAnBA,EAAIjK,KAAKhE,OAAqC,gBAAnBiO,EAAIjO,MAAMkO,OACrCW,EAAYpB,kBAAkBQ,EAAIjO,MAAMA,OAASK,SAMhE2P,EAAMZ,aAGG,MAAV/O,EACOA,EAEPjC,MAAM4D,QAAQ3B,GACPqC,EAAMiO,wBAAwBX,EAAO3P,EAAQwO,GAEpDmB,EAAMZ,aACC1M,EAAMyM,oBAAoBa,EAAMZ,aAAc/O,EAAQwO,QADjE,EARWxO,aAe/B2L,EAAWrN,UAAUgS,wBAA0B,SAAUX,EAAO3P,EAAQwO,GACpE,IAAInM,EAAQjE,KACZ,OAAOmB,QAAQiQ,IAAIxP,EAAO0P,KAAI,SAAUa,GACpC,OAAa,OAATA,EACO,KAEPxS,MAAM4D,QAAQ4O,GACPlO,EAAMiO,wBAAwBX,EAAOY,EAAM/B,GAElDmB,EAAMZ,aACC1M,EAAMyM,oBAAoBa,EAAMZ,aAAcwB,EAAM/B,QAD/D,OAKD7C,EAzQM,GA4QjB,SAAS6E,EAAUC,GACf,IAAIxN,EAAY,IAAIC,IAChBuG,EAAM,KACV,OAAO,IAAIjI,GAAW,SAAUuB,GAa5B,OAZAE,EAAUiE,IAAInE,GACd0G,EAAMA,GAAOgH,EAAMtM,UAAU,CACzBtE,KAAM,SAAUF,GACZsD,EAAUX,SAAQ,SAAUyH,GAAO,OAAOA,EAAIlK,MAAQkK,EAAIlK,KAAKF,OAEnEuE,MAAO,SAAUA,GACbjB,EAAUX,SAAQ,SAAUyH,GAAO,OAAOA,EAAI7F,OAAS6F,EAAI7F,MAAMA,OAErEqH,SAAU,WACNtI,EAAUX,SAAQ,SAAUyH,GAAO,OAAOA,EAAIwB,UAAYxB,EAAIwB,iBAG/D,WACCtI,EAAUW,OAAOb,KAAcE,EAAUY,MAAQ4F,IACjDA,EAAIxF,cACJwF,EAAM,UAuCtB,IAAI,EAAiB7L,OAAOU,UAAUL,eAClCyS,EAAgB,WAChB,SAASA,EAAa5O,GAClB,IAAI6O,EAAO7O,EAAG6O,KAAM9N,EAAKf,EAAG8O,mBAAoBA,OAA4B,IAAP/N,GAAwBA,EAAIqH,EAAQpI,EAAGoI,MAAOuC,EAAK3K,EAAG+O,YAAaA,OAAqB,IAAPpE,EAAgB,aAAoCA,EAAIqE,EAAKhP,EAAGiP,QAASA,OAAiB,IAAPD,GAAwBA,EAAIE,EAAKlP,EAAGmP,gBAAiBA,OAAyB,IAAPD,EAAgB,GAAKA,EAAIE,EAAapP,EAAGoP,WAAY9I,EAAyBtG,EAAGsG,uBACjYhK,KAAK+S,cAAgB,IAAIlH,EACzB7L,KAAK4G,WAAa,IAAI0F,EACtBtM,KAAK6S,gBAAkB,GACvB7S,KAAKgT,UAAY,EACjBhT,KAAKiT,QAAU,IAAIC,IACnBlT,KAAKmT,oBAAsB,IAAID,IAC/BlT,KAAKoT,eAAiB,IAAK,KAAgBC,QAAUH,KACrDlT,KAAKsT,wBAA0B,IAAIJ,IACnClT,KAAKuT,qBAAuB,IAAIL,IAChClT,KAAKuS,KAAOA,EACZvS,KAAKwS,mBAAqBA,EAC1BxS,KAAK0J,UAAYoC,EACjB9L,KAAKyS,YAAcA,EACnBzS,KAAK6S,gBAAkBA,EACvB7S,KAAK8S,WAAaA,GAAc,IAAIvF,EAAW,CAAEC,MAAO1B,EAAM0H,aAC9DxT,KAAK2S,QAAUA,EACf3S,KAAKgK,yBAA2BA,EA2zBpC,OAzzBAsI,EAAapS,UAAUuT,KAAO,WAC1B,IAAIxP,EAAQjE,KACZA,KAAKiT,QAAQ/O,SAAQ,SAAUwP,EAAOxO,GAClCjB,EAAM0P,qBAAqBzO,MAE/BlF,KAAKmT,oBAAoBjP,SAAQ,SAAU7C,GACvCA,EAA+C,IAAI,KAAe,QAG1EiR,EAAapS,UAAU0T,OAAS,SAAUlQ,GACtC,IAAIwI,EAAWxI,EAAGwI,SAAUjH,EAAYvB,EAAGuB,UAAW4O,EAAqBnQ,EAAGmQ,mBAAoBC,EAAsBpQ,EAAGqQ,cAAetP,EAAKf,EAAGsQ,eAAgBA,OAAwB,IAAPvP,EAAgB,GAAKA,EAAI4J,EAAK3K,EAAGuQ,oBAAqBA,OAA6B,IAAP5F,GAAwBA,EAAI6F,EAAoBxQ,EAAGyQ,OAAQzB,EAAKhP,EAAGsD,YAAaA,OAAqB,IAAP0L,EAAgB,OAASA,EAAI5L,EAAcpD,EAAGoD,YAAa8L,EAAKlP,EAAGyK,QAASA,OAAiB,IAAPyE,EAAgB,GAAKA,EACxc,OAAO9R,EAAUd,UAAM,OAAQ,GAAQ,WACnC,IAAIgM,EAAYoI,EAA2BC,EACvCpQ,EAAQjE,KACZ,OAAO+B,EAAY/B,MAAM,SAAUsU,GAC/B,OAAQA,EAAGjS,OACP,KAAK,EAOD,OANwC,QAAU6J,EAAU,IACpB,SAAWpF,GAA+B,aAAhBA,EAA4B,IAC9FkF,EAAahM,KAAKmF,kBAClB+G,EAAWlM,KAAK8K,UAAUoB,GAAUxD,SACpC1I,KAAKuU,SAASvI,GAAY,WAAc,MAAO,CAAGtD,SAAUwD,MAC5DjH,EAAYjF,KAAKwU,aAAatI,EAAUjH,GACnCjF,KAAK8K,UAAUoB,GAAUnB,iBACvB,CAAC,EAAG/K,KAAK8S,WAAW7H,qBAAqBiB,EAAUjH,EAAWkJ,IADd,CAAC,EAAG,GAE/D,KAAK,EACDlJ,EAAYqP,EAAGhS,OACfgS,EAAGjS,MAAQ,EACf,KAAK,EA+BD,OA9BA+R,EAA4B,WACxB,IAAIK,EAAM,GAgBV,OAfIX,GACA7P,EAAMgP,QAAQ/O,SAAQ,SAAUR,EAAIwB,GAChC,IAAIwP,EAAkBhR,EAAGgR,gBACzB,GAAIA,EAAiB,CACjB,IAAIpP,EAAYoP,EAAgBpP,UAC5BA,GACA,EAAe1E,KAAKkT,EAAqBxO,KACzCmP,EAAIvP,GAAW,CACXyP,QAASb,EAAoBxO,GAC7BD,MAAOpB,EAAM2C,WAAWC,IAAI3B,SAMzCuP,GAEXzU,KAAK+S,cAAc9G,aAAaD,EAAYE,EAAUjH,GACtDjF,KAAK0J,UAAUkL,iBAAiB,CAC5B5I,WAAYA,EACZtD,SAAUwD,EACVjH,UAAWA,EACX8O,cAAeK,IACfD,OAAQD,EACRL,mBAAoBA,IAExB7T,KAAK4J,mBACLyK,EAAOrU,KACA,CAAC,EAAG,IAAImB,SAAQ,SAAUC,EAASC,GAClC,IAAIwT,EACA/O,EACJuO,EAAKS,sBAAsB5I,EAAU9L,EAASA,EAAS,GAAI+N,GAAU,CAAE0F,mBAAoBA,IAAuB5O,GAAW,GAAOc,UAAU,CAC1ItE,KAAM,SAAUG,IACR,QAAsBA,IAA2B,SAAhBoF,EACjClB,EAAQ,IAAIrC,EAAY,CACpBI,cAAejC,EAAOqF,UAI9BoN,EAAKtB,cAAc3G,mBAAmBJ,GAClB,aAAhBlF,GACAuN,EAAK3K,UAAU0C,mBAAmB,CAC9BJ,WAAYA,EACZpK,OAAQA,EACR8G,SAAUwD,EACVjH,UAAWA,EACX8O,cAAeK,IACfD,OAAQD,IAGhBW,EAAcjT,IAElBkE,MAAO,SAAUnC,GACb0Q,EAAKtB,cAAc5G,kBAAkBH,EAAYrI,GACjD0Q,EAAK3K,UAAUqL,qBAAqB,CAChC/I,WAAYA,EACZ6H,mBAAoBA,IAExBQ,EAAKzK,mBACLyK,EAAKE,SAASvI,GAAY,WAAc,MAAO,CAAGtD,SAAU,SAC5DrH,EAAO,IAAIoC,EAAY,CACnBK,aAAcH,MAGtBwJ,SAAU,WASN,GARIrH,GACAuO,EAAKtB,cAAc5G,kBAAkBH,EAAYlG,GAErDuO,EAAK3K,UAAUqL,qBAAqB,CAChC/I,WAAYA,EACZ6H,mBAAoBA,IAExBQ,EAAKzK,mBACD9D,EACAzE,EAAOyE,OADX,CAI8B,mBAAnBkO,IACPA,EAAiBA,EAAea,IAEpC,IAAIG,EAAuB,GACvB1R,EAAgB0Q,IAChBA,EAAe9P,SAAQ,SAAU+Q,GAC7B,GAA4B,iBAAjBA,EACPZ,EAAKpB,QAAQ/O,SAAQ,SAAUR,GAC3B,IAAIgR,EAAkBhR,EAAGgR,gBACrBA,GACAA,EAAgBpP,YAAc2P,GAC9BD,EAAqBhS,KAAK0R,EAAgB7M,kBAIjD,CACD,IAAIqN,EAAe,CACf7P,MAAO4P,EAAa5P,MACpBJ,UAAWgQ,EAAahQ,UACxB6B,YAAa,gBAEbmO,EAAa9G,UACb+G,EAAa/G,QAAU8G,EAAa9G,SAExC6G,EAAqBhS,KAAKqR,EAAKhP,MAAM6P,QAIjD/T,QAAQiQ,IAAI6C,EAAsBe,EAAuB,IAAIlT,MAAK,WAC9DuS,EAAKE,SAASvI,GAAY,WAAc,MAAO,CAAGtD,SAAU,SACxC,WAAhB1B,GACA6N,IACA,QAAsBA,WACfA,EAAY5N,OAEvB7F,EAAQyT,sBAShDvC,EAAapS,UAAU4H,WAAa,SAAU5C,EAASV,EAAS2Q,EAAWpI,GACvE,OAAOjM,EAAUd,UAAM,OAAQ,GAAQ,WACnC,IAAI0D,EAAIoJ,EAAUrI,EAAIqC,EAAauH,EAAIF,EAAS9I,EAAOJ,EAAW4P,EAAaO,EAAeC,EAAa3C,EAAIvF,EAAUvL,EAAQ0T,EAAaC,EAAWC,EAAQC,EAC7JxR,EAAQjE,KACZ,OAAO+B,EAAY/B,MAAM,SAAU4S,GAC/B,OAAQA,EAAGvQ,OACP,KAAK,EAID,OAHAqB,EAAKc,EAAQsI,SAAUA,OAAkB,IAAPpJ,EAAgB,KAAOA,EAAIe,EAAKD,EAAQsC,YAAaA,OAAqB,IAAPrC,EAAgB,cAAgBA,EAAI4J,EAAK7J,EAAQ2J,QAASA,OAAiB,IAAPE,EAAgB,GAAKA,EAC9LhJ,EAAQrF,KAAK8K,UAAUtG,EAAQa,OAAOqD,SACtCzD,EAAYjF,KAAKwU,aAAanP,EAAOb,EAAQS,WACxCjF,KAAK8K,UAAUzF,GAAO0F,iBACpB,CAAC,EAAG/K,KAAK8S,WAAW7H,qBAAqB5F,EAAOJ,EAAWkJ,IADd,CAAC,EAAG,GAE5D,KAAK,EACDlJ,EAAY2N,EAAGtQ,OACfsQ,EAAGvQ,MAAQ,EACf,KAAK,EAuCD,GAtCAmC,EAAUpE,EAASA,EAAS,GAAIoE,GAAU,CAAES,UAAWA,IAEvDoQ,EADAD,EAAgC,iBAAhBtO,GAAkD,aAAhBA,EAE7CsO,IACD1C,EAAK1S,KAAK0J,UAAU8J,WAAW7D,KAAK,CAChCtK,MAAOA,EACPJ,UAAWA,EACX2K,mBAAmB,EACnBC,YAAY,IACZ1C,EAAWuF,EAAGvF,SAAUvL,EAAS8Q,EAAG9Q,OACxCyT,GAAelI,GAA4B,sBAAhBrG,EAC3B+N,EAAcjT,GAElB0T,EAAcD,GAA+B,eAAhBvO,GAAgD,YAAhBA,GACzD,QAAc,CAAC,QAASzB,KACxBiQ,GAAc,GAClBC,EAAYvV,KAAKgT,YACjBwC,EAAyB,aAAhB1O,EACH9G,KAAK0V,iBAAiBxQ,EAASG,EAAOb,QACtC0B,EACNlG,KAAKuU,SAASrP,GAAS,WAAc,MAAO,CACxCwD,SAAUrD,EACVsQ,cAAeJ,EACfK,aAAa,EACbJ,OAAQA,MAEZxV,KAAK6V,WAAW9I,GAChB/M,KAAK4G,WAAW2F,UAAU,CACtBrH,QAASA,EACTwD,SAAUrD,EACVqH,uBAAwB4I,EACxBrQ,UAAWA,EACX0H,OAAQwI,IAAc3R,EAAUoJ,KAChCC,UAAWsI,IAAc3R,EAAUqE,QACnCiF,SAAUA,EACVC,oBAAqBA,IAEzB/M,KAAK4J,mBACD0L,EAAa,CAqBb,GApBAG,EAAgBzV,KAAK8V,aAAa,CAC9BP,UAAWA,EACXrQ,QAASA,EACTwD,SAAUrD,EACVb,QAASA,EACTuI,oBAAqBA,IACtB3B,OAAM,SAAUtF,GACf,MAAkBA,EAxlCnCjG,eAAe,iBAylCYiG,GAGFyP,GAAatR,EAAM8R,SAAS7Q,GAASyQ,gBACrC1R,EAAM2C,WAAWqG,eAAe/H,EAASY,EAAOiH,GAChD9I,EAAM4R,WAAW3Q,GACjBjB,EAAM4R,WAAW9I,GACjB9I,EAAM2F,oBAEJ,IAAInG,EAAY,CAAEK,aAAcgC,QAG1B,sBAAhBgB,EACA,MAAO,CAAC,EAAG2O,GAEfA,EAAcrK,OAAM,eAKxB,OAHApL,KAAK4G,WAAWsG,sBAAsBhI,GAAUoQ,GAChDtV,KAAK6V,WAAW3Q,GAChBlF,KAAK6V,WAAW9I,GACZ/M,KAAK8K,UAAUzF,GAAO2Q,mBACf,CAAC,EAAGhW,KAAK8S,WAAW7E,aAAa,CAChCvF,SAAUrD,EACV6I,aAAc,CAAE/H,KAAM0O,GACtB1G,QAASA,EACTlJ,UAAWA,EACXmJ,wBAAwB,IACzBtM,MAAK,SAAUF,GAGd,OAFAqC,EAAM+I,gBAAgB9H,EAAStD,EAAQ4C,EAASuI,GAChD9I,EAAM2F,mBACChI,OAGnB5B,KAAK4J,mBACE,CAAC,EAAG,CAAEzD,KAAM0O,aAKvCvC,EAAapS,UAAU8M,gBAAkB,SAAU9H,EAAStD,EAAQ8B,EAAIqJ,GACpE,IAAIjG,EAAcpD,EAAGoD,YAAa7B,EAAYvB,EAAGuB,UAAW+B,EAActD,EAAGsD,YACzD,aAAhBF,EACA9G,KAAKuU,SAASrP,GAAS,WAAc,MAAO,CACxC+Q,QAAS,CAAErU,OAAQA,EAAOuE,KAAMgH,UAAU,OAI9CnN,KAAK0J,UAAUsD,gBAAgBpL,EAAQ5B,KAAK+V,SAAS7Q,GAASwD,SAAUzD,EAAW8H,EAAqC,WAAhB/F,GAA4C,QAAhBA,IAG5IsL,EAAapS,UAAUgW,yBAA2B,SAAUhR,EAASV,EAASG,GAC1E,IAAIV,EAAQjE,KACZ,SAASmW,EAAO3K,EAAQC,GACpB,GAAI9G,EAAS6G,GACT,IACI7G,EAAS6G,GAAQC,GAErB,MAAO/J,KAQf,OAAO,SAAUiF,EAAiBsP,GAE9B,GADAhS,EAAM4R,WAAW3Q,GAAS,GACrByB,EAAL,CAEA,IAAIjD,EAAKO,EAAM8R,SAAS7Q,GAAUwP,EAAkBhR,EAAGgR,gBAAiBhM,EAAWhF,EAAGgF,SAClF5B,EAAc4N,EACZA,EAAgBlQ,QAAQsC,YACxBtC,EAAQsC,YACd,GAAoB,YAAhBA,EAAJ,CAEA,IAAIR,EAAUpD,EAAyByD,EAAgBxD,eACnDiD,EAAasO,GAAmBA,EAAgBjN,gBAChD2O,KAA0BhQ,GAC1BA,EAAWjD,gBAAkBwD,EAAgBxD,eAC7CkT,EAAwB7R,EAAQoL,oBAC9BqG,GAAWtP,EAAgBuE,mBAC5BkL,GAAwB5R,EAAQ8R,6BACjB,eAAhBxP,GACgB,sBAAhBA,EACJ,IAAIR,GAAY+P,EAAhB,CAGA,IAAIE,EAAmBjT,EAAgBqD,EAAgB9C,eACnDmD,EAAc0N,GACXA,EAAgBlQ,QAAQwC,aACxBxC,EAAQwC,aACR,OACP,GAAoB,SAAhBA,GAA0BuP,GAAoB5P,EAAgB7C,aAC9D,OAAOqS,EAAO,QAAS,IAAI1S,EAAY,CACnCI,cAAe8C,EAAgB9C,cAC/BC,aAAc6C,EAAgB7C,gBAGtC,IACI,IAAIqC,OAAO,EACPqQ,OAAY,EAChB,GAAIP,EACoB,aAAhBnP,GAA8C,iBAAhBA,GAC9B7C,EAAMsQ,SAASrP,GAAS,WAAc,MAAO,CAAG+Q,QAAS,SAE7D9P,EAAO8P,EAAQrU,OACf4U,GAAaP,EAAQ9I,aAEpB,CACD,IAAI9G,EAAYqO,GAAmBA,EAAgBhN,eAC/C+O,EAAqC,SAAhBzP,IACpBX,GAAaA,EAAUxC,iBACpB8C,EAAgB9C,cACxB,GAAIuC,GAAcA,EAAWD,OAASsQ,EAClCtQ,EAAOC,EAAWD,KAClBqQ,GAAY,MAEX,CACD,IAAIE,EAAazS,EAAMyF,UAAU8J,WAAW7D,KAAK,CAC7CtK,MAAOqD,EACPzD,UAAW0B,EAAgBuE,mBACvBvE,EAAgB1B,UACpB2K,mBAAmB,EACnBC,YAAY,IAEhB1J,EAAOuQ,EAAW9U,OAClB4U,GAAaE,EAAWvJ,UAGhC,IAAI/F,EAAQoP,KAAehS,EAAQoL,mBACf,eAAhB9I,GACA6P,EAAkB,CAClBxQ,KAAMiB,EAAQhB,GAAcA,EAAWD,KAAOA,EAC9CG,QAASA,EACTnD,cAAewD,EAAgBxD,cAC/BiE,MAAOA,GAES,QAAhBJ,GAAyBuP,IACzBI,EAAgB1P,OAASN,EAAgB9C,eAE7CsS,EAAO,OAAQQ,GAEnB,MAAO7S,GACHqS,EAAO,QAAS,IAAI1S,EAAY,CAAEK,aAAcA,WAI5DwO,EAAapS,UAAU4K,UAAY,SAAUpC,GACzC,IAAI0K,EAAiBpT,KAAKoT,eAC1B,IAAKA,EAAewD,IAAIlO,GAAW,CAC/B,IAAI8E,EAAQxN,KAAK0J,UAAU8J,WACvBqD,EAAcrJ,EAAMsJ,kBAAkBpO,GACtCqO,GAAU,QAAsCvJ,EAAMwJ,iBAAiBH,IACvEpI,EAAczO,KAAK8S,WAAWrE,YAAYoI,GAC1C1L,EAAcnL,KAAK8S,WAAW3H,YAAY4L,GAC1CE,EAAe,CACfvO,SAAUmO,EACV9L,kBAAkB,QAAiB8L,GACnCb,mBAAoBhW,KAAK8S,WAAW7D,qBAAqB4H,GACzDpI,YAAaA,EACbtD,YAAaA,EACb+L,aAAa,SAAiB,QAAuBL,KAErD/N,EAAM,SAAUqO,GACZA,IAAQ/D,EAAewD,IAAIO,IAC3B/D,EAAegE,IAAID,EAAKF,IAGhCnO,EAAIJ,GACJI,EAAI+N,GACJ/N,EAAI2F,GACJ3F,EAAIqC,GAER,OAAOiI,EAAevM,IAAI6B,IAE9B4J,EAAapS,UAAUsU,aAAe,SAAU9L,EAAUzD,GACtD,OAAO7E,EAASA,EAAS,GAAIJ,KAAK8K,UAAUpC,GAAUwO,aAAcjS,IAExEqN,EAAapS,UAAUmX,WAAa,SAAU7S,EAASE,QAC3B,IAApBA,IAA8BA,GAAkB,IACZ,QAAkC,YAAxBF,EAAQsC,YAA2B,IACrFtC,EAAQS,UAAYjF,KAAKwU,aAAahQ,EAAQa,MAAOb,EAAQS,gBACV,IAAxCT,EAAQ8R,8BACf9R,EAAQ8R,6BAA8B,GAE1C,IAAIgB,EAAqBlX,EAAS,GAAIoE,GACtC,OAAO,IAAIF,EAAgB,CACvBC,aAAcvE,KACdwE,QAAS8S,EACT5S,gBAAiBA,KAGzB4N,EAAapS,UAAUmF,MAAQ,SAAUb,GACrC,IAAIP,EAAQjE,KAMZ,OALwC,QAAUwE,EAAQa,MAAO,KAEzB,QAAiC,aAAvBb,EAAQa,MAAMoK,KAAqB,KAC7C,SAAWjL,EAAQoL,kBAAmB,KACtC,SAAWpL,EAAQ0E,aAAc,IAClE,IAAI/H,SAAQ,SAAUC,EAASC,GAClC,IAAIkW,EAAetT,EAAMoT,WAAW7S,GAAS,GAC7CP,EAAMkP,oBAAoBiE,IAAI,SAAWG,EAAarS,QAAS7D,GAC/DkW,EACK3V,SACAE,KAAKV,EAASC,GACdS,MAAK,WACN,OAAOmC,EAAMkP,oBAAoB3N,OAAO,SAAW+R,EAAarS,gBAI5EoN,EAAapS,UAAUiF,gBAAkB,WACrC,OAAOqS,OAAOxX,KAAKgT,cAEvBV,EAAapS,UAAUuX,iBAAmB,SAAUvS,GAChDlF,KAAK0X,4BAA4BxS,GACjClF,KAAK4J,oBAET0I,EAAapS,UAAUwX,4BAA8B,SAAUxS,GAC3DlF,KAAK6J,iBAAiB3E,GACtBlF,KAAK4G,WAAW2B,UAAUrD,GAC1BlF,KAAK6V,WAAW3Q,IAEpBoN,EAAapS,UAAUyX,iBAAmB,SAAUzS,EAAS0S,GACzD5X,KAAKuU,SAASrP,GAAS,SAAUxB,GAG7B,OAFgBA,EAAGmU,UACT/O,IAAI8O,GACP,CAAEhC,aAAa,OAG9BtD,EAAapS,UAAUwV,iBAAmB,SAAUxQ,EAASwD,EAAUlE,GACnE,IAAIP,EAAQjE,KACRwV,EAASxV,KAAK+V,SAAS7Q,GAASsQ,OAcpC,OAbIA,GACAA,IAYGxV,KAAK0J,UAAU8J,WAAWsE,MAAM,CACnCzS,MAAOqD,EACPzD,UAAWT,EAAQS,UACnB4K,YAAY,EACZvH,eAfiB,WACjB,IAAIA,EAAiB,KACjBoM,EAAkBzQ,EAAM8R,SAAS7Q,GAASwP,gBAC9C,GAAIA,EAAiB,CACjB,IAAItO,EAAasO,EAAgBjN,gBAC7BrB,IACAkC,EAAiBlC,EAAWD,MAGpC,OAAOmC,GAOPyP,SAAU,SAAU9B,GAChBhS,EAAMsQ,SAASrP,GAAS,WAAc,MAAO,CAAG0Q,aAAa,EAAMK,QAASA,UAIxF3D,EAAapS,UAAUsK,mBAAqB,SAAUtF,EAASwP,GAC3D1U,KAAKuU,SAASrP,GAAS,WAAc,MAAO,CAAGwP,gBAAiBA,OAEpEpC,EAAapS,UAAUqL,sBAAwB,SAAUrG,GACrD,IAAIsQ,EAASxV,KAAK+V,SAAS7Q,GAASsQ,OACpCxV,KAAKuU,SAASrP,GAAS,WAAc,MAAO,CAAGwP,gBAAiB,SAC5Dc,GACAA,KAERlD,EAAapS,UAAU8X,WAAa,WAChChY,KAAKmT,oBAAoBjP,SAAQ,SAAU7C,GACvCA,EAA+C,IAAI,KAAe,QAEtE,IAAI4W,EAAW,GAQf,OAPAjY,KAAKiT,QAAQ/O,SAAQ,SAAUR,EAAIwB,GACTxB,EAAGgR,iBAErBuD,EAASjV,KAAKkC,MAEtBlF,KAAK4G,WAAWyF,MAAM4L,GACtBjY,KAAK+S,cAAc1G,QACZrM,KAAK0J,UAAU2C,SAE1BiG,EAAapS,UAAUgY,WAAa,WAChC,IAAIjU,EAAQjE,KACZ,OAAOA,KAAKgY,aAAalW,MAAK,WAC1B,OAAOmC,EAAMkU,+BAGrB7F,EAAapS,UAAUiY,yBAA2B,SAAUC,GACxD,IAAInU,EAAQjE,UACW,IAAnBoY,IAA6BA,GAAiB,GAClD,IAAIC,EAA0B,GAe9B,OAdArY,KAAKiT,QAAQ/O,SAAQ,SAAUR,EAAIwB,GAC/B,IAAIwP,EAAkBhR,EAAGgR,gBACzB,GAAIA,EAAiB,CACjB,IAAI5N,EAAc4N,EAAgBlQ,QAAQsC,YAC1C4N,EAAgB/M,mBACI,eAAhBb,IACCsR,GAAkC,YAAhBtR,GACnBuR,EAAwBrV,KAAK0R,EAAgB7M,WAEjD5D,EAAMsQ,SAASrP,GAAS,WAAc,MAAO,CAAG+Q,QAAS,SACzDhS,EAAM4R,WAAW3Q,OAGzBlF,KAAK4J,mBACEzI,QAAQiQ,IAAIiH,IAEvB/F,EAAapS,UAAUwK,aAAe,SAAUxF,EAASV,EAASG,GAE9D,OADA3E,KAAK2X,iBAAiBzS,EAASlF,KAAKkW,yBAAyBhR,EAASV,EAASG,IACxE3E,KAAK8H,WAAW5C,EAASV,IAEpC8N,EAAapS,UAAUoY,WAAa,SAAUpT,EAASV,EAASoT,GAK5D,OAHA5X,KAAK2X,iBAAiBzS,EAAS0S,GAC/B5X,KAAK8H,WAAW5C,EAASV,GACpB4G,OAAM,eACJlG,GAEXoN,EAAapS,UAAUuI,yBAA2B,SAAU/E,GACxD,IAAIO,EAAQjE,KACRqF,EAAQ3B,EAAG2B,MAAOyB,EAAcpD,EAAGoD,YAAa7B,EAAYvB,EAAGuB,UACnEI,EAAQrF,KAAK8K,UAAUzF,GAAOqD,SAC9BzD,EAAYjF,KAAKwU,aAAanP,EAAOJ,GACrC,IAAIsT,EAAiB,SAAUtT,GAC3B,OAAOhB,EAAM6Q,sBAAsBzP,EAAO,GAAIJ,GAAW,GAAOqM,KAAI,SAAU1P,GAK1E,GAJKkF,GAA+B,aAAhBA,IAChB7C,EAAMyF,UAAU8O,uBAAuB5W,EAAQyD,EAAOJ,GACtDhB,EAAM2F,qBAEN,QAAsBhI,GACtB,MAAM,IAAI6B,EAAY,CAClBI,cAAejC,EAAOqF,SAG9B,OAAOrF,MAGf,GAAI5B,KAAK8K,UAAUzF,GAAO0F,iBAAkB,CACxC,IAAI0N,EAAsBzY,KAAK8S,WAAW7H,qBAAqB5F,EAAOJ,GAAWnD,KAAKyW,GACtF,OAAO,IAAInV,GAAW,SAAUuB,GAC5B,IAAI0G,EAAM,KAEV,OADAoN,EAAoB3W,MAAK,SAAU4W,GAAc,OAAOrN,EAAMqN,EAAW3S,UAAUpB,KAAcA,EAASmB,OACnG,WAAc,OAAOuF,GAAOA,EAAIxF,kBAG/C,OAAO0S,EAAetT,IAE1BqN,EAAapS,UAAUqI,UAAY,SAAUrD,GACzClF,KAAK2T,qBAAqBzO,GAC1BlF,KAAK4J,oBAET0I,EAAapS,UAAUyT,qBAAuB,SAAUzO,GACpDlF,KAAK0X,4BAA4BxS,GACjClF,KAAK0F,YAAYR,IAErBoN,EAAapS,UAAUwF,YAAc,SAAUR,GAC3ClF,KAAKmT,oBAAoB3N,OAAO,SAAWN,GAC3ClF,KAAKmT,oBAAoB3N,OAAO,gBAAkBN,GAClDlF,KAAK+V,SAAS7Q,GAASH,cAAcb,SAAQ,SAAUyU,GAAK,OAAOA,EAAE9S,iBACrE7F,KAAKiT,QAAQzN,OAAON,IAExBoN,EAAapS,UAAUuG,sBAAwB,SAAUiO,EAAiB7E,QACnD,IAAfA,IAAyBA,GAAa,GAC1C,IAAInM,EAAKgR,EAAgBlQ,QAASS,EAAYvB,EAAGuB,UAAWI,EAAQ3B,EAAG2B,MAAOyB,EAAcpD,EAAGoD,YAAa8I,EAAoBlM,EAAGkM,kBAC/HxJ,EAAasO,EAAgBjN,gBAC7BwO,EAAUjW,KAAK+V,SAASrB,EAAgBxP,SAAS+Q,QACrD,GAAIA,GAAWA,EAAQ9I,SACnB,MAAO,CAAEhH,KAAM8P,EAAQrU,OAAQ8E,SAAS,GAE5C,GAAoB,aAAhBI,GAA8C,iBAAhBA,EAC9B,MAAO,CAAEX,UAAMD,EAAWQ,SAAS,GAEvC,IAAIjC,EAAKzE,KAAK0J,UAAU8J,WAAW7D,KAAK,CACpCtK,MAAOA,EACPJ,UAAWA,EACXqD,eAAgBlC,EAAaA,EAAWD,UAAOD,EAC/C0J,mBAAmB,EACnBC,WAAYA,IACZjO,EAAS6C,EAAG7C,OAAQuL,EAAW1I,EAAG0I,SACtC,MAAO,CACHhH,KAAOgH,GAAYyC,EAAqBhO,OAAS,EACjD8E,SAAUyG,IAGlBmF,EAAapS,UAAUuJ,2BAA6B,SAAUmP,GAC1D,IAAIlE,EACJ,GAAmC,iBAAxBkE,EAAkC,CACzC,IAAIC,EAAwB7Y,KAAK+V,SAAS6C,GAAqBlE,iBACvB,QAAUmE,EAAuB,IACzEnE,EAAkBmE,OAGlBnE,EAAkBkE,EAEtB,IAAIlV,EAAKgR,EAAgBlQ,QAASS,EAAYvB,EAAGuB,UAAWI,EAAQ3B,EAAG2B,MACvE,MAAO,CACHiD,eAAgBtI,KAAKyG,sBAAsBiO,GAAiB,GAAOvO,KACnElB,UAAWA,EACXyD,SAAUrD,IAGlBiN,EAAapS,UAAU0J,iBAAmB,WACtC,IAAI3F,EAAQjE,KACZA,KAAKyS,cACLzS,KAAKiT,QAAQ/O,SAAQ,SAAU4U,EAAMC,GAC7BD,EAAKlD,aACLkD,EAAKjB,UAAU3T,SAAQ,SAAU0T,GACzBA,GACAA,EAAS3T,EAAM2C,WAAWC,IAAIkS,GAAKD,EAAK7C,gBAM5D3D,EAAapS,UAAU8K,cAAgB,WACnC,OAAOhL,KAAK8S,YAEhBR,EAAapS,UAAU4U,sBAAwB,SAAUzP,EAAO8I,EAASlJ,EAAW+T,GAChF,IAEIN,EAFAzU,EAAQjE,UACU,IAAlBgZ,IAA4BA,EAAgBhZ,KAAKwS,oBAErD,IAAIrH,EAAcnL,KAAK8K,UAAUzF,GAAO8F,YACxC,GAAIA,EAAa,CACb,IAAe8N,EAANjZ,KAAqCsT,wBAAyBf,EAA9DvS,KAAwEuS,KAC7EjC,EAAY,CACZjL,MAAO8F,EACPlG,UAAWA,EACXiU,eAAe,QAAiB/N,SAAgB,EAChDgD,QAASnO,KAAK0O,eAAetO,EAASA,EAAS,GAAI+N,GAAU,CAAEgL,YAAaH,MAGhF,GADA7K,EAAUmC,EAAUnC,QAChB6K,EAAe,CACf,IAAII,EAAgBH,EAA0BpS,IAAIsE,IAAgB,IAAI+H,IACtE+F,EAA0B7B,IAAIjM,EAAaiO,GAC3C,IAAIC,EAAYC,KAAKC,UAAUtU,GAE/B,KADAyT,EAAaU,EAAcvS,IAAIwS,IACd,CACbD,EAAchC,IAAIiC,EAAWX,EAAatG,GAAU,QAAQG,EAAMjC,KAClE,IAAIkJ,EAAU,WACVJ,EAAc5T,OAAO6T,GAChBD,EAAc3T,MACfwT,EAA0BzT,OAAO2F,GACrCsO,EAAa5T,eAEb4T,EAAef,EAAW3S,UAAU,CACpCtE,KAAM+X,EACN1T,MAAO0T,EACPrM,SAAUqM,UAKlBd,EAAatG,GAAU,QAAQG,EAAMjC,SAIzCoI,EAAatV,EAAWsW,GAAG,CAAEvT,KAAM,KACnCgI,EAAUnO,KAAK0O,eAAeP,GAElC,IAAIM,EAAczO,KAAK8K,UAAUzF,GAAOoJ,YAWxC,OAVIA,IACAiK,EAztBZ,SAAkBA,EAAYlP,GAC1B,OAAO,IAAIpG,GAAW,SAAUuB,GAC5B,IAAIlD,EAAOkD,EAASlD,KAAMqE,EAAQnB,EAASmB,MAAOqH,EAAWxI,EAASwI,SAClEwM,EAAkB,EAClBC,GAAY,EACZC,EAAU,CACVpY,KAAM,SAAUF,KACVoY,EACF,IAAIxY,SAAQ,SAAUC,GAitBQ,IAAUQ,EAhtBpCR,GAgtBoCQ,EAhtBtBL,EAitBX0C,EAAM6O,WAAW7E,aAAa,CACjCvF,SAAU+F,EACVP,aAActM,EACduM,QAASA,EACTlJ,UAAWA,SAptBZnD,MAAK,SAAUF,KACZ+X,EACFlY,GAAQA,EAAKb,KAAK+D,EAAU/C,GAC5BgY,GAAaC,EAAQ1M,cACtB,SAAUzL,KACPiY,EACF7T,GAASA,EAAMlF,KAAK+D,EAAUjD,OAGtCoE,MAAO,SAAUpE,GACboE,GAASA,EAAMlF,KAAK+D,EAAUjD,IAElCyL,SAAU,WACNyM,GAAY,EACPD,GACDxM,GAAYA,EAASvM,KAAK+D,KAIlC0G,EAAMqN,EAAW3S,UAAU8T,GAC/B,OAAO,WAAc,OAAOxO,EAAIxF,kBA2rBfiU,CAASpB,IASnBA,GAEXpG,EAAapS,UAAU4V,aAAe,SAAUpS,GAC5C,IAGIiT,EACAoD,EAJA9V,EAAQjE,KACRuV,EAAY7R,EAAG6R,UAAWrQ,EAAUxB,EAAGwB,QAASwD,EAAWhF,EAAGgF,SAAUlE,EAAUd,EAAGc,QAASuI,EAAsBrJ,EAAGqJ,oBACvH9H,EAAYT,EAAQS,UAAWR,EAAKD,EAAQwC,YAAaA,OAAqB,IAAPvC,EAAgB,OAASA,EAAIqC,EAActC,EAAQsC,YAG9H,OAAO,IAAI3F,SAAQ,SAAUC,EAASC,GAClC,IAAIqX,EAAazU,EAAM6Q,sBAAsBpM,EAAUlE,EAAQ2J,QAASlJ,GACpE+U,EAAS,gBAAkB9U,EAC/BjB,EAAMkP,oBAAoBiE,IAAI4C,EAAQ3Y,GACtC,IAAImY,EAAU,WACVvV,EAAMkP,oBAAoB3N,OAAOwU,GACjC/V,EAAMsQ,SAASrP,GAAS,SAAUxB,GACVA,EAAGqB,cACTS,OAAOI,OAGzBA,EAAe8S,EAAWpH,KAAI,SAAU1P,GAQxC,GAPI2T,GAAatR,EAAM8R,SAAS7Q,GAASyQ,gBACrC1R,EAAM+I,gBAAgB9H,EAAStD,EAAQ4C,EAASuI,GAChD9I,EAAM2C,WAAWoG,gBAAgB9H,EAAStD,EAAQmL,GAClD9I,EAAM4R,WAAW3Q,GACjBjB,EAAM4R,WAAW9I,GACjB9I,EAAM2F,oBAEU,SAAhB5C,GAA0B1D,EAAgB1B,EAAOqF,QACjD,OAAO5F,EAAO,IAAIoC,EAAY,CAC1BI,cAAejC,EAAOqF,UAM9B,GAHoB,QAAhBD,IACA+S,EAAkBnY,EAAOqF,QAEzB8F,GAAuC,aAAhBjG,EACvB6P,EAAkB/U,EAAOuE,SAExB,CACD,IAAIzC,EAAKO,EAAMyF,UAAU8J,WAAW7D,KAAK,CACrC1K,UAAWA,EACXI,MAAOqD,EACPmH,YAAY,EACZD,mBAAmB,IACnBqK,EAAWvW,EAAG9B,QAAmB8B,EAAGyJ,UACxB3I,EAAQoL,qBACpB+G,EAAkBsD,OAG3BlU,UAAU,CACTD,MAAO,SAAUA,GACb0T,IACAnY,EAAOyE,IAEXqH,SAAU,WACNqM,IACApY,EAAQ,CACJ+E,KAAMwQ,EACN1P,OAAQ8S,EACRzT,SAAS,EACTnD,cAAeF,EAAciE,MAC7BE,OAAO,OAInBnD,EAAMsQ,SAASrP,GAAS,SAAUxB,GACVA,EAAGqB,cACT+D,IAAIlD,UAI9B0M,EAAapS,UAAU6V,SAAW,SAAU7Q,GACxC,OAAQlF,KAAKiT,QAAQpM,IAAI3B,IAAY,CACjC2S,UAAW,IAAI/S,IACf8Q,aAAa,EACblN,SAAU,KACVuN,QAAS,KACTN,cAAe,EACfjB,gBAAiB,KACjB3P,cAAe,IAAID,MAG3BwN,EAAapS,UAAUqU,SAAW,SAAUrP,EAASyP,GACjD,IAAIuF,EAAOla,KAAK+V,SAAS7Q,GACrBiV,EAAU/Z,EAASA,EAAS,GAAI8Z,GAAOvF,EAAQuF,IACnDla,KAAKiT,QAAQmE,IAAIlS,EAASiV,IAE9B7H,EAAapS,UAAU2V,WAAa,SAAU3Q,EAAS0Q,QAC/B,IAAhBA,IAA0BA,GAAc,GACxC1Q,GACAlF,KAAKuU,SAASrP,GAAS,WAAc,MAAO,CAAG0Q,YAAaA,OAGpEtD,EAAapS,UAAUwO,eAAiB,SAAUP,QAC9B,IAAZA,IAAsBA,EAAU,IACpC,IAAIiM,EAAapa,KAAK8S,WAAWpE,eAAeP,GAChD,OAAO/N,EAASA,EAAS,GAAIga,GAAa,CAAEvH,gBAAiB7S,KAAK6S,mBAEtEP,EAAapS,UAAUma,cAAgB,SAAUnV,GAC7C,IAAIG,EAAQrF,KAAK4G,WAAWC,IAAI3B,GAChC,OAAQG,GACJA,EAAMlC,gBAAkBF,EAAciE,OACtC7B,EAAMlC,gBAAkBF,EAAc6C,OAE9CwM,EAAapS,UAAU6J,kBAAoB,SAAUvF,EAASU,EAAS0S,GACnE,IAAI3T,EAAQjE,KACRkJ,EAAe1E,EAAQ0E,aAE3B,IADwC,QAAUA,EAAc,KAC3DlJ,KAAK2S,QAAS,CACf,IAAImG,EAAO9Y,KAAKuT,qBAAqB1M,IAAI3B,GACpC4T,GACD9Y,KAAKuT,qBAAqB6D,IAAIlS,EAAU4T,EAAO,IAEnDA,EAAKwB,SAAWpR,EAChB4P,EAAKtU,QAAUpE,EAASA,EAAS,GAAIoE,GAAU,CAAEsC,YAAa,iBAC9D,IAAIyT,EAAe,WACf,IAAIzB,EAAO7U,EAAMsP,qBAAqB1M,IAAI3B,GACtC4T,IACI7U,EAAMoW,cAAcnV,GACpBsV,IAGAvW,EAAM6D,WAAW5C,EAAS4T,EAAKtU,QAAShB,EAAUoJ,MAAM9K,KAAK0Y,EAAQA,KAI7EA,EAAS,WACT,IAAI1B,EAAO7U,EAAMsP,qBAAqB1M,IAAI3B,GACtC4T,IACA2B,aAAa3B,EAAK4B,SAClB5B,EAAK4B,QAAU/U,WAAW4U,EAAczB,EAAKwB,YAGjD1C,GACA5X,KAAK2X,iBAAiBzS,EAAS0S,GAEnC4C,IAEJ,OAAOtV,GAEXoN,EAAapS,UAAU2J,iBAAmB,SAAU3E,GAChDlF,KAAKuT,qBAAqB/N,OAAON,IAE9BoN,EA90BQ,GAi1BfqI,EAAa,WACb,SAASA,EAAUC,GACf5a,KAAKwN,MAAQoN,EA2HjB,OAzHAD,EAAUza,UAAUsT,SAAW,WAC3B,OAAOxT,KAAKwN,OAEhBmN,EAAUza,UAAU8M,gBAAkB,SAAUpL,EAAQ8G,EAAUzD,EAAW8H,EAAqB8N,QACzE,IAAjBA,IAA2BA,GAAe,GAC9C,IAAIC,IAAmB,QAAsBlZ,GACzCiZ,IAAgB,QAAsBjZ,IAAWA,EAAOuE,OACxD2U,GAAkB,IAEjB/N,GAAuB+N,GACxB9a,KAAKwN,MAAMuN,MAAM,CACbnZ,OAAQA,EAAOuE,KACf6U,OAAQ,aACR3V,MAAOqD,EACPzD,UAAWA,KAIvB0V,EAAUza,UAAUsY,uBAAyB,SAAU5W,EAAQ8G,EAAUzD,IAChE,QAAsBrD,IACvB5B,KAAKwN,MAAMuN,MAAM,CACbnZ,OAAQA,EAAOuE,KACf6U,OAAQ,oBACR3V,MAAOqD,EACPzD,UAAWA,KAIvB0V,EAAUza,UAAU0U,iBAAmB,SAAU1I,GAC7C,IAEQ+O,EAFJhX,EAAQjE,KACRkM,EAAS2H,qBAGLoH,EADuC,mBAAhC/O,EAAS2H,mBACD3H,EAAS2H,mBAAmB3H,EAASjH,WAGrCiH,EAAS2H,mBAE5B7T,KAAKwN,MAAM0N,6BAA4B,SAAUC,GAC7C,IAAIC,EAAOnX,EAAMuJ,MACjBvJ,EAAMuJ,MAAQ2N,EACd,IACIlX,EAAMmI,mBAAmB,CACrBJ,WAAYE,EAASF,WACrBpK,OAAQ,CAAEuE,KAAM8U,GAChBvS,SAAUwD,EAASxD,SACnBzD,UAAWiH,EAASjH,UACpB8O,cAAe7H,EAAS6H,cACxBI,OAAQjI,EAASiI,SAGzB,QACIlQ,EAAMuJ,MAAQ4N,KAEnBlP,EAASF,cAGpB2O,EAAUza,UAAUkM,mBAAqB,SAAUF,GAC/C,IAAIjI,EAAQjE,KACZ,KAAK,QAAsBkM,EAAStK,QAAS,CACzC,IAAIyZ,EAAgB,CAAC,CACbzZ,OAAQsK,EAAStK,OAAOuE,KACxB6U,OAAQ,gBACR3V,MAAO6G,EAASxD,SAChBzD,UAAWiH,EAASjH,YAExBqW,EAAkBpP,EAAS6H,cAC3BuH,GACA9b,OAAO6N,KAAKiO,GAAiBpX,SAAQ,SAAU6U,GAC3C,IAAIrV,EAAK4X,EAAgBvC,GAAK1T,EAAQ3B,EAAG2B,MAAOsP,EAAUjR,EAAGiR,QACzDlQ,EAAKR,EAAMuJ,MAAMmC,KAAK,CACtBtK,MAAOA,EAAMqD,SACbzD,UAAWI,EAAMJ,UACjB2K,mBAAmB,EACnBC,YAAY,IACZ0L,EAAqB9W,EAAG7C,OAC5B,GAD+C6C,EAAG0I,SACpC,CACV,IAAIqO,GAAkB,SAAsB,WACxC,OAAO7G,EAAQ4G,EAAoB,CAC/BE,eAAgBvP,EAAStK,OACzB0D,WAAW,QAAiBD,EAAMqD,gBAAaxC,EAC/CwV,eAAgBrW,EAAMJ,eAG1BuW,GACAH,EAAcrY,KAAK,CACfpB,OAAQ4Z,EACRR,OAAQ,aACR3V,MAAOA,EAAMqD,SACbzD,UAAWI,EAAMJ,gBAMrCjF,KAAKwN,MAAMmO,oBAAmB,SAAUR,GACpCE,EAAcnX,SAAQ,SAAU6W,GAAS,OAAOI,EAAEJ,MAAMA,MACxD,IAAI5G,EAASjI,EAASiI,OAClBA,IACA,SAAsB,WAAc,OAAOA,EAAOgH,EAAGjP,EAAStK,gBAK9E+Y,EAAUza,UAAU6U,qBAAuB,SAAUrR,GACjD,IAAIsI,EAAatI,EAAGsI,WAAiCtI,EAAGmQ,oBAEpD7T,KAAKwN,MAAMoO,iBAAiB5P,IAGpC2O,EAAUza,UAAUyJ,sBAAwB,SAAUjB,EAAUzD,EAAWqC,GACvEtH,KAAKwN,MAAMuN,MAAM,CACbnZ,OAAQ0F,EACR0T,OAAQ,aACR/V,UAAWA,EACXI,MAAOqD,KAGfiS,EAAUza,UAAUmM,MAAQ,WACxB,OAAOrM,KAAKwN,MAAMnB,SAEfsO,EA7HK,GAmVhB,QAhNoB,WAChB,SAASkB,EAAarX,GAClB,IAAIP,EAAQjE,KACZA,KAAK8b,eAAiB,GACtB9b,KAAK+b,oBAAsB,GAC3B/b,KAAKgc,oBAAsB,GAC3B,IAAIxO,EAAQhJ,EAAQgJ,MAAO9J,EAAKc,EAAQmO,QAASA,OAAiB,IAAPjP,GAAwBA,EAAIe,EAAKD,EAAQyX,mBAAoBA,OAA4B,IAAPxX,EAAgB,EAAIA,EAAIyX,EAAoB1X,EAAQ0X,kBAAmB7N,EAAK7J,EAAQgO,mBAAoBA,OAA4B,IAAPnE,GAAuBA,EAAIyN,EAAiBtX,EAAQsX,eAAgBpJ,EAAKlO,EAAQwF,uBAAwBA,OAAgC,IAAP0I,GAAwBA,EAAIhF,EAAYlJ,EAAQkJ,UAAWyO,EAAW3X,EAAQ2X,SAAUxO,EAAkBnJ,EAAQmJ,gBAAiByO,EAAsB5X,EAAQe,KAAM8W,EAAyB7X,EAAQ8X,QAChlB/J,EAAO/N,EAAQ+N,KAInB,IAHKA,GAAQ7E,IACT6E,EAAO,eAENA,IAAS/E,EACV,MAA8C,IAAI,KAAe,GAIrExN,KAAKuS,KAAOA,EACZvS,KAAKwN,MAAQA,EACbxN,KAAK8L,MAAQ,IAAI6O,EAAUnN,GAC3BxN,KAAKuc,sBAAwB5J,GAAWsJ,EAAqB,EAC7Djc,KAAKwS,mBAAqBA,EAC1BxS,KAAK8b,eAAiBA,GAAkB,GACxC9b,KAAKmc,SAAWA,EACZF,GACAtW,YAAW,WAAc,OAAQ1B,EAAMsY,uBAAwB,IAAWN,GAE9Ejc,KAAKqX,WAAarX,KAAKqX,WAAWmF,KAAKxc,MACvCA,KAAKqF,MAAQrF,KAAKqF,MAAMmX,KAAKxc,MAC7BA,KAAK4T,OAAS5T,KAAK4T,OAAO4I,KAAKxc,MAC/BA,KAAKkY,WAAalY,KAAKkY,WAAWsE,KAAKxc,MACvCA,KAAKmY,yBAA2BnY,KAAKmY,yBAAyBqE,KAAKxc,WAIlC,IAAtBkc,GAELA,GAAuC,oBAAXO,SAC9BA,OAAOC,kBAAoB1c,MAkB/BA,KAAKsc,QA1DC,SA2DNtc,KAAK8S,WAAa,IAAIvF,EAAW,CAC7BC,MAAOA,EACPC,OAAQzN,KACR0N,UAAWA,EACXC,gBAAiBA,IAErB3N,KAAKuE,aAAe,IAAI+N,EAAa,CACjCC,KAAMvS,KAAKuS,KACXzG,MAAO9L,KAAK8L,MACZ0G,mBAAoBA,EACpBG,QAASA,EACTE,gBAAiB,CACbtN,KAAM6W,EACNE,QAASD,GAEbvJ,WAAY9S,KAAK8S,WACjB9I,uBAAwBA,EACxByI,YAAa,WACLxO,EAAM0Y,gBACN1Y,EAAM0Y,eAAe,CACjBC,OAAQ,GACRC,MAAO,CACH5J,QAAShP,EAAMM,aAAaqC,WAAWmF,WACvC+Q,UAAW7Y,EAAMM,aAAawO,cAAchH,YAEhDgR,0BAA2B9Y,EAAMuJ,MAAMwP,SAAQ,QA4HnE,OAtHAnB,EAAa3b,UAAUuT,KAAO,WAC1BzT,KAAKuE,aAAakP,QAEtBoI,EAAa3b,UAAUmX,WAAa,SAAU7S,GAS1C,OARIxE,KAAK8b,eAAezE,aACpB7S,EAAUpE,EAASA,EAAS,GAAIJ,KAAK8b,eAAezE,YAAa7S,KAEjExE,KAAKuc,uBACoB,iBAAxB/X,EAAQsC,aACmB,sBAAxBtC,EAAQsC,cACZtC,EAAUpE,EAASA,EAAS,GAAIoE,GAAU,CAAEsC,YAAa,iBAEtD9G,KAAKuE,aAAa8S,WAAW7S,IAExCqX,EAAa3b,UAAUmF,MAAQ,SAAUb,GAWrC,OAVIxE,KAAK8b,eAAezW,QACpBb,EAAUpE,EAASA,EAAS,GAAIJ,KAAK8b,eAAezW,OAAQb,KAExB,QAAkC,sBAAxBA,EAAQsC,YAAqC,GAI3F9G,KAAKuc,uBAAiD,iBAAxB/X,EAAQsC,cACtCtC,EAAUpE,EAASA,EAAS,GAAIoE,GAAU,CAAEsC,YAAa,iBAEtD9G,KAAKuE,aAAac,MAAMb,IAEnCqX,EAAa3b,UAAU0T,OAAS,SAAUpP,GAItC,OAHIxE,KAAK8b,eAAelI,SACpBpP,EAAUpE,EAASA,EAAS,GAAIJ,KAAK8b,eAAelI,QAASpP,IAE1DxE,KAAKuE,aAAaqP,OAAOpP,IAEpCqX,EAAa3b,UAAU6F,UAAY,SAAUvB,GACzC,OAAOxE,KAAKuE,aAAakE,yBAAyBjE,IAEtDqX,EAAa3b,UAAU+c,UAAY,SAAUzY,EAASqL,GAElD,YADmB,IAAfA,IAAyBA,GAAa,GACnC7P,KAAKwN,MAAMyP,UAAUzY,EAASqL,IAEzCgM,EAAa3b,UAAUgd,aAAe,SAAU1Y,EAASqL,GAErD,YADmB,IAAfA,IAAyBA,GAAa,GACnC7P,KAAKwN,MAAM0P,aAAa1Y,EAASqL,IAE5CgM,EAAa3b,UAAUid,WAAa,SAAU3Y,GAC1C,IAAI5C,EAAS5B,KAAKwN,MAAM2P,WAAW3Y,GAEnC,OADAxE,KAAKuE,aAAaqF,mBACXhI,GAEXia,EAAa3b,UAAUkd,cAAgB,SAAU5Y,GAC7C,IAAI5C,EAAS5B,KAAKwN,MAAM4P,cAAc5Y,GAEtC,OADAxE,KAAKuE,aAAaqF,mBACXhI,GAEXia,EAAa3b,UAAUmd,UAAY,SAAU7Y,GACzC,IAAI5C,EAAS5B,KAAKwN,MAAM6P,UAAU7Y,GAElC,OADAxE,KAAKuE,aAAaqF,mBACXhI,GAEXia,EAAa3b,UAAUod,wBAA0B,SAAUC,GACvDvd,KAAK2c,eAAiBY,GAE1B1B,EAAa3b,UAAUsd,aAAe,SAAUC,GAC5C,OAAO,QAAQzd,KAAKuS,KAAMkL,IAE9B5B,EAAa3b,UAAUwd,iBAAmB,WAGtC,OAAO1d,KAAKuE,cAEhBsX,EAAa3b,UAAUgY,WAAa,WAChC,IAAIjU,EAAQjE,KACZ,OAAOmB,QAAQC,UACVU,MAAK,WAAc,OAAOmC,EAAMM,aAAayT,gBAC7ClW,MAAK,WAAc,OAAOX,QAAQiQ,IAAInN,EAAM8X,oBAAoBzK,KAAI,SAAUqM,GAAM,OAAOA,WAC3F7b,MAAK,WAAc,OAAOmC,EAAMkU,+BAEzC0D,EAAa3b,UAAU8X,WAAa,WAChC,IAAI/T,EAAQjE,KACZ,OAAOmB,QAAQC,UACVU,MAAK,WAAc,OAAOmC,EAAMM,aAAayT,gBAC7ClW,MAAK,WAAc,OAAOX,QAAQiQ,IAAInN,EAAM+X,oBAAoB1K,KAAI,SAAUqM,GAAM,OAAOA,YAEpG9B,EAAa3b,UAAU0d,aAAe,SAAUL,GAC5C,IAAItZ,EAAQjE,KAEZ,OADAA,KAAK+b,oBAAoB/Y,KAAKua,GACvB,WACHtZ,EAAM8X,oBAAsB9X,EAAM8X,oBAAoB8B,QAAO,SAAU1C,GAAK,OAAOA,IAAMoC,OAGjG1B,EAAa3b,UAAU4d,aAAe,SAAUP,GAC5C,IAAItZ,EAAQjE,KAEZ,OADAA,KAAKgc,oBAAoBhZ,KAAKua,GACvB,WACHtZ,EAAM+X,oBAAsB/X,EAAM+X,oBAAoB6B,QAAO,SAAU1C,GAAK,OAAOA,IAAMoC,OAGjG1B,EAAa3b,UAAUiY,yBAA2B,SAAUC,GACxD,OAAOpY,KAAKuE,aAAa4T,yBAAyBC,IAEtDyD,EAAa3b,UAAU8c,QAAU,SAAUnN,GACvC,OAAO7P,KAAKwN,MAAMwP,QAAQnN,IAE9BgM,EAAa3b,UAAU6d,QAAU,SAAUC,GACvC,OAAOhe,KAAKwN,MAAMuQ,QAAQC,IAE9BnC,EAAa3b,UAAU0N,aAAe,SAAUF,GAC5C1N,KAAK8S,WAAWlF,aAAaF,IAEjCmO,EAAa3b,UAAU6N,aAAe,SAAUL,GAC5C1N,KAAK8S,WAAW/E,aAAaL,IAEjCmO,EAAa3b,UAAU8N,aAAe,WAClC,OAAOhO,KAAK8S,WAAW9E,gBAE3B6N,EAAa3b,UAAU+d,6BAA+B,SAAUtQ,GAC5D3N,KAAK8S,WAAWjF,mBAAmBF,IAEhCkO,EA7MQ","file":"npm.apollo-client.fd5647aa181e29ae7e67.js","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { getOperationDefinition, isEqual, tryFunctionOrLogError, cloneDeep, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, canUseWeakMap, graphQLResultHasError, removeConnectionDirectiveFromDocument, hasClientExports, getDefaultValues, getOperationName } from 'apollo-utilities';\nimport { Observable as Observable$1, execute, ApolloLink } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nvar NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n\nvar Observable = (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[$$observable] = function () {\n        return this;\n    };\n    Observable.prototype['@@observable'] = function () {\n        return this;\n    };\n    return Observable;\n}(Observable$1));\n\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n\nfunction isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (isNonEmptyArray(err.graphQLErrors)) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\nvar FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue && (storeValue.networkError ||\n        (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors)));\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        var opDef = getOperationDefinition(options.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        _this.queryManager = queryManager;\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        var result = this.getCurrentResult();\n        if (result.data === undefined) {\n            result.data = {};\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        if (this.isTornDown) {\n            var lastResult = this.lastResult;\n            return {\n                data: !this.lastError && lastResult && lastResult.data || void 0,\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        var result;\n        var fetchPolicy = this.options.fetchPolicy;\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' ||\n            fetchPolicy === 'no-cache';\n        if (queryStoreValue) {\n            var networkStatus = queryStoreValue.networkStatus;\n            if (hasError(queryStoreValue, this.options.errorPolicy)) {\n                return {\n                    data: void 0,\n                    loading: false,\n                    networkStatus: networkStatus,\n                    error: new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    }),\n                };\n            }\n            if (queryStoreValue.variables) {\n                this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n                this.variables = this.options.variables;\n            }\n            result = {\n                data: data,\n                loading: isNetworkRequestInFlight(networkStatus),\n                networkStatus: networkStatus,\n            };\n            if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n                result.errors = queryStoreValue.graphQLErrors;\n            }\n        }\n        else {\n            var loading = isNetworkFetchPolicy ||\n                (partial && fetchPolicy !== 'cache-only');\n            result = {\n                data: data,\n                loading: loading,\n                networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready,\n            };\n        }\n        if (!partial) {\n            this.updateLastResult(__assign(__assign({}, result), { stale: false }));\n        }\n        return __assign(__assign({}, result), { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        var queryStore = this.queryManager.queryStore.get(this.queryId);\n        if (queryStore) {\n            queryStore.networkError = null;\n            queryStore.graphQLErrors = [];\n        }\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'cache-and-network') {\n            fetchPolicy = 'network-only';\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = __assign(__assign({}, this.variables), variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = __assign(__assign({}, this.options.variables), this.variables);\n        }\n        return this.queryManager.fetchQuery(this.queryId, __assign(__assign({}, this.options), { fetchPolicy: fetchPolicy }), FetchType.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery, 2) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), { variables: __assign(__assign({}, this.variables), fetchMoreOptions.variables) }))), { fetchPolicy: 'network-only' });\n        var qid = this.queryManager.generateQueryId();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId)\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            _this.queryManager.stopQuery(qid);\n            return fetchMoreResult;\n        }, function (error) {\n            _this.queryManager.stopQuery(qid);\n            throw error;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldFetchPolicy = this.options.fetchPolicy;\n        this.options = __assign(__assign({}, this.options), opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var fetchPolicy = opts.fetchPolicy;\n        return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' ||\n            oldFetchPolicy === 'standby' ||\n            fetchPolicy === 'network-only'), opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        variables = variables || this.variables;\n        if (!tryFetch && isEqual(variables, this.variables)) {\n            return this.observers.size && fetchResults\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.variables = this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.queryManager.fetchQuery(this.queryId, this.options);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var _a = queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.options.pollInterval = undefined;\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        this.options.pollInterval = pollInterval;\n        this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n        var previousResult = this.lastResult;\n        this.lastResult = newResult;\n        this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n            ? newResult\n            : cloneDeep(newResult);\n        return previousResult;\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        try {\n            var subObserver = observer._subscription._observer;\n            if (subObserver && !subObserver.error) {\n                subObserver.error = defaultSubscriptionObserverErrorCallback;\n            }\n        }\n        catch (_a) { }\n        var first = !this.observers.size;\n        this.observers.add(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (first) {\n            this.setUpQuery();\n        }\n        return function () {\n            if (_this.observers.delete(observer) && !_this.observers.size) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;\n        if (this.shouldSubscribe) {\n            queryManager.addObservableQuery(queryId, this);\n        }\n        if (this.options.pollInterval) {\n            assertNotCacheFirstOrOnly(this);\n            queryManager.startPollingQuery(this.options, queryId);\n        }\n        var onError = function (error) {\n            _this.updateLastResult(__assign(__assign({}, _this.lastResult), { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));\n            iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n        };\n        queryManager.observeQuery(queryId, this.options, {\n            next: function (result) {\n                if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n                    var previousResult_1 = _this.updateLastResult(result);\n                    var _a = _this.options, query_1 = _a.query, variables = _a.variables, fetchPolicy_1 = _a.fetchPolicy;\n                    if (queryManager.transform(query_1).hasClientExports) {\n                        queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n                            var previousVariables = _this.variables;\n                            _this.variables = _this.options.variables = variables;\n                            if (!result.loading &&\n                                previousResult_1 &&\n                                fetchPolicy_1 !== 'cache-only' &&\n                                queryManager.transform(query_1).serverQuery &&\n                                !isEqual(previousVariables, variables)) {\n                                _this.refetch();\n                            }\n                            else {\n                                iterateObserversSafely(_this.observers, 'next', result);\n                            }\n                        });\n                    }\n                    else {\n                        iterateObserversSafely(_this.observers, 'next', result);\n                    }\n                }\n            },\n            error: onError,\n        }).catch(onError);\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        var queryManager = this.queryManager;\n        this.isTornDown = true;\n        queryManager.stopPollingQuery(this.queryId);\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        queryManager.removeObservableQuery(this.queryId);\n        queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n    };\n    return ObservableQuery;\n}(Observable));\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\nfunction iterateObserversSafely(observers, method, argument) {\n    var observersWithMethod = [];\n    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });\n    observersWithMethod.forEach(function (obs) { return obs[method](argument); });\n}\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 3) : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n        this.store[mutationId] = {\n            mutation: mutation,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = error;\n        }\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = null;\n        }\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\n\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        process.env.NODE_ENV === \"production\" ? invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 19) : invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        var storeValue = this.store && this.store[queryId];\n        if (storeValue) {\n            storeValue.networkError = null;\n            storeValue.previousVariables = null;\n            if (complete) {\n                storeValue.networkStatus = NetworkStatus.ready;\n            }\n        }\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        Object.keys(this.store).forEach(function (queryId) {\n            if (observableQueryIds.indexOf(queryId) < 0) {\n                _this.stopQuery(queryId);\n            }\n            else {\n                _this.store[queryId].networkStatus = NetworkStatus.loading;\n            }\n        });\n    };\n    return QueryStore;\n}());\n\nfunction capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n            process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in a query but no ApolloClient resolvers ' +\n                'were specified. This means ApolloClient local resolver handling ' +\n                'has been disabled, and @client directives will be passed through ' +\n                'to your link chain.');\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return this.resolvers ? removeClientSetsFromDocument(document) : document;\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var cache = this.cache;\n        var newContext = __assign(__assign({}, context), { cache: cache, getCacheKey: function (obj) {\n                if (cache.config) {\n                    return cache.config.dataIdFromObject(obj);\n                }\n                else {\n                    process.env.NODE_ENV === \"production\" ? invariant(false, 6) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' +\n                        'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                }\n            } });\n        return newContext;\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? capitalizeFirstLetter(definitionOperation)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            process.env.NODE_ENV === \"production\" ? invariant(fragment, 7) : invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field, fragmentMap: execContext.fragmentMap }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\n\nfunction multiplex(inner) {\n    var observers = new Set();\n    var sub = null;\n    return new Observable(function (observer) {\n        observers.add(observer);\n        sub = sub || inner.subscribe({\n            next: function (value) {\n                observers.forEach(function (obs) { return obs.next && obs.next(value); });\n            },\n            error: function (error) {\n                observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n            complete: function () {\n                observers.forEach(function (obs) { return obs.complete && obs.complete(); });\n            },\n        });\n        return function () {\n            if (observers.delete(observer) && !observers.size && sub) {\n                sub.unsubscribe();\n                sub = null;\n            }\n        };\n    });\n}\nfunction asyncMap(observable, mapFn) {\n    return new Observable(function (observer) {\n        var next = observer.next, error = observer.error, complete = observer.complete;\n        var activeNextCount = 0;\n        var completed = false;\n        var handler = {\n            next: function (value) {\n                ++activeNextCount;\n                new Promise(function (resolve) {\n                    resolve(mapFn(value));\n                }).then(function (result) {\n                    --activeNextCount;\n                    next && next.call(observer, result);\n                    completed && handler.complete();\n                }, function (e) {\n                    --activeNextCount;\n                    error && error.call(observer, e);\n                });\n            },\n            error: function (e) {\n                error && error.call(observer, e);\n            },\n            complete: function () {\n                completed = true;\n                if (!activeNextCount) {\n                    complete && complete.call(observer);\n                }\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.inFlightLinkObservables = new Map();\n        this.pollingInfoByQueryId = new Map();\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: store.getCache() });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, generateUpdateQueriesInfo, self;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation, 9) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 10) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n                        mutationId = this.generateQueryId();\n                        mutation = this.transform(mutation).document;\n                        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                _this.queries.forEach(function (_a, queryId) {\n                                    var observableQuery = _a.observableQuery;\n                                    if (observableQuery) {\n                                        var queryName = observableQuery.queryName;\n                                        if (queryName &&\n                                            hasOwnProperty.call(updateQueriesByName, queryName)) {\n                                            ret[queryId] = {\n                                                updater: updateQueriesByName[queryName],\n                                                query: _this.queryStore.get(queryId),\n                                            };\n                                        }\n                                    }\n                                });\n                            }\n                            return ret;\n                        };\n                        this.mutationStore.initMutation(mutationId, mutation, variables);\n                        this.dataStore.markMutationInit({\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                            optimisticResponse: optimisticResponse,\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        self.mutationStore.markMutationResult(mutationId);\n                                        if (fetchPolicy !== 'no-cache') {\n                                            self.dataStore.markMutationResult({\n                                                mutationId: mutationId,\n                                                result: result,\n                                                document: mutation,\n                                                variables: variables,\n                                                updateQueries: generateUpdateQueriesInfo(),\n                                                update: updateWithProxyFn,\n                                            });\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        self.setQuery(mutationId, function () { return ({ document: null }); });\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error) {\n                                            self.mutationStore.markMutationError(mutationId, error);\n                                        }\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            self.setQuery(mutationId, function () { return ({ document: null }); });\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        });\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result, shouldFetch, requestId, cancel, networkResult;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _a = options.metadata, metadata = _a === void 0 ? null : _a, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b, _c = options.context, context = _c === void 0 ? {} : _c;\n                        query = this.transform(options.query).document;\n                        variables = this.getVariables(query, options.variables);\n                        if (!this.transform(query).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(query, variables, context)];\n                    case 1:\n                        variables = _e.sent();\n                        _e.label = 2;\n                    case 2:\n                        options = __assign(__assign({}, options), { variables: variables });\n                        isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n                        needToFetch = isNetworkOnly;\n                        if (!isNetworkOnly) {\n                            _d = this.dataStore.getCache().diff({\n                                query: query,\n                                variables: variables,\n                                returnPartialData: true,\n                                optimistic: false,\n                            }), complete = _d.complete, result = _d.result;\n                            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                            storeResult = result;\n                        }\n                        shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n                        if (hasDirectives(['live'], query))\n                            shouldFetch = true;\n                        requestId = this.idCounter++;\n                        cancel = fetchPolicy !== 'no-cache'\n                            ? this.updateQueryWatch(queryId, query, options)\n                            : undefined;\n                        this.setQuery(queryId, function () { return ({\n                            document: query,\n                            lastRequestId: requestId,\n                            invalidated: true,\n                            cancel: cancel,\n                        }); });\n                        this.invalidate(fetchMoreForQueryId);\n                        this.queryStore.initQuery({\n                            queryId: queryId,\n                            document: query,\n                            storePreviousVariables: shouldFetch,\n                            variables: variables,\n                            isPoll: fetchType === FetchType.poll,\n                            isRefetch: fetchType === FetchType.refetch,\n                            metadata: metadata,\n                            fetchMoreForQueryId: fetchMoreForQueryId,\n                        });\n                        this.broadcastQueries();\n                        if (shouldFetch) {\n                            networkResult = this.fetchRequest({\n                                requestId: requestId,\n                                queryId: queryId,\n                                document: query,\n                                options: options,\n                                fetchMoreForQueryId: fetchMoreForQueryId,\n                            }).catch(function (error) {\n                                if (isApolloError(error)) {\n                                    throw error;\n                                }\n                                else {\n                                    if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                                        _this.invalidate(queryId);\n                                        _this.invalidate(fetchMoreForQueryId);\n                                        _this.broadcastQueries();\n                                    }\n                                    throw new ApolloError({ networkError: error });\n                                }\n                            });\n                            if (fetchPolicy !== 'cache-and-network') {\n                                return [2, networkResult];\n                            }\n                            networkResult.catch(function () { });\n                        }\n                        this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n                        this.invalidate(queryId);\n                        this.invalidate(fetchMoreForQueryId);\n                        if (this.transform(query).hasForcedResolvers) {\n                            return [2, this.localState.runResolvers({\n                                    document: query,\n                                    remoteResult: { data: storeResult },\n                                    context: context,\n                                    variables: variables,\n                                    onlyRunForcedResolvers: true,\n                                }).then(function (result) {\n                                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                                    _this.broadcastQueries();\n                                    return result;\n                                })];\n                        }\n                        this.broadcastQueries();\n                        return [2, { data: storeResult }];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markQueryResult = function (queryId, result, _a, fetchMoreForQueryId) {\n        var fetchPolicy = _a.fetchPolicy, variables = _a.variables, errorPolicy = _a.errorPolicy;\n        if (fetchPolicy === 'no-cache') {\n            this.setQuery(queryId, function () { return ({\n                newData: { result: result.data, complete: true },\n            }); });\n        }\n        else {\n            this.dataStore.markQueryResult(result, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n        }\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        function invoke(method, argument) {\n            if (observer[method]) {\n                try {\n                    observer[method](argument);\n                }\n                catch (e) {\n                    process.env.NODE_ENV === \"production\" || invariant.error(e);\n                }\n            }\n            else if (method === 'error') {\n                process.env.NODE_ENV === \"production\" || invariant.error(argument);\n            }\n        }\n        return function (queryStoreValue, newData) {\n            _this.invalidate(queryId, false);\n            if (!queryStoreValue)\n                return;\n            var _a = _this.getQuery(queryId), observableQuery = _a.observableQuery, document = _a.document;\n            var fetchPolicy = observableQuery\n                ? observableQuery.options.fetchPolicy\n                : options.fetchPolicy;\n            if (fetchPolicy === 'standby')\n                return;\n            var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n            var lastResult = observableQuery && observableQuery.getLastResult();\n            var networkStatusChanged = !!(lastResult &&\n                lastResult.networkStatus !== queryStoreValue.networkStatus);\n            var shouldNotifyIfLoading = options.returnPartialData ||\n                (!newData && queryStoreValue.previousVariables) ||\n                (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                fetchPolicy === 'cache-only' ||\n                fetchPolicy === 'cache-and-network';\n            if (loading && !shouldNotifyIfLoading) {\n                return;\n            }\n            var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n            var errorPolicy = observableQuery\n                && observableQuery.options.errorPolicy\n                || options.errorPolicy\n                || 'none';\n            if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n                return invoke('error', new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }));\n            }\n            try {\n                var data = void 0;\n                var isMissing = void 0;\n                if (newData) {\n                    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n                        _this.setQuery(queryId, function () { return ({ newData: null }); });\n                    }\n                    data = newData.result;\n                    isMissing = !newData.complete;\n                }\n                else {\n                    var lastError = observableQuery && observableQuery.getLastError();\n                    var errorStatusChanged = errorPolicy !== 'none' &&\n                        (lastError && lastError.graphQLErrors) !==\n                            queryStoreValue.graphQLErrors;\n                    if (lastResult && lastResult.data && !errorStatusChanged) {\n                        data = lastResult.data;\n                        isMissing = false;\n                    }\n                    else {\n                        var diffResult = _this.dataStore.getCache().diff({\n                            query: document,\n                            variables: queryStoreValue.previousVariables ||\n                                queryStoreValue.variables,\n                            returnPartialData: true,\n                            optimistic: true,\n                        });\n                        data = diffResult.result;\n                        isMissing = !diffResult.complete;\n                    }\n                }\n                var stale = isMissing && !(options.returnPartialData ||\n                    fetchPolicy === 'cache-only');\n                var resultFromStore = {\n                    data: stale ? lastResult && lastResult.data : data,\n                    loading: loading,\n                    networkStatus: queryStoreValue.networkStatus,\n                    stale: stale,\n                };\n                if (errorPolicy === 'all' && hasGraphQLErrors) {\n                    resultFromStore.errors = queryStoreValue.graphQLErrors;\n                }\n                invoke('next', resultFromStore);\n            }\n            catch (networkError) {\n                invoke('error', new ApolloError({ networkError: networkError }));\n            }\n        };\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cache = this.dataStore.getCache();\n            var transformed = cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby', 11) : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        options.variables = this.getVariables(options.query, options.variables);\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new ObservableQuery({\n            queryManager: this,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query, 12) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 13) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 14) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 15) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        return new Promise(function (resolve, reject) {\n            var watchedQuery = _this.watchQuery(options, false);\n            _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n            watchedQuery\n                .result()\n                .then(resolve, reject)\n                .then(function () {\n                return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.idCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        this.stopPollingQuery(queryId);\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(queryId);\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var listeners = _a.listeners;\n            listeners.add(listener);\n            return { invalidated: false };\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var cancel = this.getQuery(queryId).cancel;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (cancel)\n            cancel();\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        return this.dataStore.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.setQuery(queryId, function () { return ({ newData: null }); });\n                _this.invalidate(queryId);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.observeQuery = function (queryId, options, observer) {\n        this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));\n        return this.fetchQuery(queryId, options);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, variables = _a.variables;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n                if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n                    _this.dataStore.markSubscriptionResult(result, query, variables);\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n        this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n        this.getQuery(queryId).subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query, fetchPolicy = _a.fetchPolicy, returnPartialData = _a.returnPartialData;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n            return { data: undefined, partial: false };\n        }\n        var _b = this.dataStore.getCache().diff({\n            query: query,\n            variables: variables,\n            previousResult: lastResult ? lastResult.data : undefined,\n            returnPartialData: true,\n            optimistic: optimistic,\n        }), result = _b.result, complete = _b.complete;\n        return {\n            data: (complete || returnPartialData) ? result : void 0,\n            partial: !complete,\n        };\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery, 17) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        return {\n            previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        var _this = this;\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (info.invalidated) {\n                info.listeners.forEach(function (listener) {\n                    if (listener) {\n                        listener(_this.queryStore.get(id), info.newData);\n                    }\n                });\n            }\n        });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        if (deduplication === void 0) { deduplication = this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _a = this, inFlightLinkObservables_1 = _a.inFlightLinkObservables, link = _a.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n                    var cleanup = function () {\n                        byVariables_1.delete(varJson_1);\n                        if (!byVariables_1.size)\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        cleanupSub_1.unsubscribe();\n                    };\n                    var cleanupSub_1 = observable.subscribe({\n                        next: cleanup,\n                        error: cleanup,\n                        complete: cleanup,\n                    });\n                }\n            }\n            else {\n                observable = multiplex(execute(link, operation));\n            }\n        }\n        else {\n            observable = Observable.of({ data: {} });\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            var observable = _this.getObservableFromLink(document, options.context, variables);\n            var fqrfId = \"fetchRequest:\" + queryId;\n            _this.fetchQueryRejectFns.set(fqrfId, reject);\n            var cleanup = function () {\n                _this.fetchQueryRejectFns.delete(fqrfId);\n                _this.setQuery(queryId, function (_a) {\n                    var subscriptions = _a.subscriptions;\n                    subscriptions.delete(subscription);\n                });\n            };\n            var subscription = observable.map(function (result) {\n                if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                    _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n                    _this.invalidate(queryId);\n                    _this.invalidate(fetchMoreForQueryId);\n                    _this.broadcastQueries();\n                }\n                if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n                    return reject(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                if (errorPolicy === 'all') {\n                    errorsFromStore = result.errors;\n                }\n                if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                    resultFromStore = result.data;\n                }\n                else {\n                    var _a = _this.dataStore.getCache().diff({\n                        variables: variables,\n                        query: document,\n                        optimistic: false,\n                        returnPartialData: true,\n                    }), result_1 = _a.result, complete = _a.complete;\n                    if (complete || options.returnPartialData) {\n                        resultFromStore = result_1;\n                    }\n                }\n            }).subscribe({\n                error: function (error) {\n                    cleanup();\n                    reject(error);\n                },\n                complete: function () {\n                    cleanup();\n                    resolve({\n                        data: resultFromStore,\n                        errors: errorsFromStore,\n                        loading: false,\n                        networkStatus: NetworkStatus.ready,\n                        stale: false,\n                    });\n                },\n            });\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                subscriptions.add(subscription);\n            });\n        });\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return (this.queries.get(queryId) || {\n            listeners: new Set(),\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: 1,\n            observableQuery: null,\n            subscriptions: new Set(),\n        });\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign(__assign({}, prev), updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (queryId, invalidated) {\n        if (invalidated === void 0) { invalidated = true; }\n        if (queryId) {\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n        var _this = this;\n        var pollInterval = options.pollInterval;\n        process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 18) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (!this.ssrMode) {\n            var info = this.pollingInfoByQueryId.get(queryId);\n            if (!info) {\n                this.pollingInfoByQueryId.set(queryId, (info = {}));\n            }\n            info.interval = pollInterval;\n            info.options = __assign(__assign({}, options), { fetchPolicy: 'network-only' });\n            var maybeFetch_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    if (_this.checkInFlight(queryId)) {\n                        poll_1();\n                    }\n                    else {\n                        _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n                    }\n                }\n            };\n            var poll_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    clearTimeout(info.timeout);\n                    info.timeout = setTimeout(maybeFetch_1, info.interval);\n                }\n            };\n            if (listener) {\n                this.addQueryListener(queryId, listener);\n            }\n            poll_1();\n        }\n        return queryId;\n    };\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n        this.pollingInfoByQueryId.delete(queryId);\n    };\n    return QueryManager;\n}());\n\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !graphQLResultHasError(result);\n        if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!graphQLResultHasError(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    _this.markMutationResult({\n                        mutationId: mutation.mutationId,\n                        result: { data: optimistic_1 },\n                        document: mutation.document,\n                        variables: mutation.variables,\n                        updateQueries: mutation.updateQueries,\n                        update: mutation.update,\n                    });\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!graphQLResultHasError(mutation.result)) {\n            var cacheWrites_1 = [{\n                    result: mutation.result.data,\n                    dataId: 'ROOT_MUTATION',\n                    query: mutation.document,\n                    variables: mutation.variables,\n                }];\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                Object.keys(updateQueries_1).forEach(function (id) {\n                    var _a = updateQueries_1[id], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (complete) {\n                        var nextQueryResult = tryFunctionOrLogError(function () {\n                            return updater(currentQueryResult, {\n                                mutationResult: mutation.result,\n                                queryName: getOperationName(query.document) || undefined,\n                                queryVariables: query.variables,\n                            });\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites_1.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: query.document,\n                                variables: query.variables,\n                            });\n                        }\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n                var update = mutation.update;\n                if (update) {\n                    tryFunctionOrLogError(function () { return update(c, mutation.result); });\n                }\n            });\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (optimisticResponse) {\n            this.cache.removeOptimistic(mutationId);\n        }\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\n\nvar version = \"2.6.10\";\n\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        var cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? false : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link && resolvers) {\n            link = ApolloLink.empty();\n        }\n        if (!link || !cache) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError(\"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" +\n                \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" +\n                \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\");\n        }\n        this.link = link;\n        this.cache = cache;\n        this.store = new DataStore(cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || {};\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            link: this.link,\n            store: this.store,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: function () {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.queryStore.getStore(),\n                            mutations: _this.queryManager.mutationStore.getStore(),\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true),\n                    });\n                }\n            },\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = __assign(__assign({}, this.defaultOptions.watchQuery), options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = __assign(__assign({}, this.defaultOptions.query), options);\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network', 5) : invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' +\n            'client.query can only return a single result. Please use client.watchQuery ' +\n            'to receive multiple results from the cache and the network, or consider ' +\n            'using a different fetchPolicy, such as cache-first or network-only.');\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = __assign(__assign({}, this.defaultOptions.mutate), options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.cache.writeQuery(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.cache.writeFragment(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.cache.writeData(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        process.env.NODE_ENV === \"production\" || invariant.warn('Calling the initQueryManager method is no longer necessary, ' +\n            'and it will be removed from ApolloClient in version 3.0.');\n        return this.queryManager;\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    return ApolloClient;\n}());\n\nexport default ApolloClient;\nexport { ApolloClient, ApolloError, FetchType, NetworkStatus, ObservableQuery, isApolloError };\n//# sourceMappingURL=bundle.esm.js.map\n"],"sourceRoot":""}