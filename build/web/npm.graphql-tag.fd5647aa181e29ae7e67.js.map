{"version":3,"sources":["webpack://pbm/./node_modules/graphql-tag/src/index.js"],"names":["parse","normalize","string","replace","trim","docCache","fragmentSourceMap","printFragmentWarnings","stripLoc","doc","removeLocAtThisLevel","docType","Object","prototype","toString","call","map","d","Error","loc","startToken","endToken","key","value","valueType","keys","hasOwnProperty","experimentalFragmentVariables","parseDocument","cacheKey","parsed","kind","ast","astFragmentMap","definitions","i","length","fragmentDefinition","fragmentName","name","sourceKey","source","body","substring","start","end","console","warn","push","processFragments","gql","args","Array","slice","arguments","literals","result","default","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","module","exports"],"mappings":"4EAAA,IAEIA,EAFS,EAAQ,MAEFA,MAInB,SAASC,EAAUC,GACjB,OAAOA,EAAOC,QAAQ,UAAW,KAAKC,OAIxC,IAAIC,EAAW,GAGXC,EAAoB,GAepBC,GAAwB,EA+C5B,SAASC,EAASC,EAAKC,GACrB,IAAIC,EAAUC,OAAOC,UAAUC,SAASC,KAAKN,GAE7C,GAAgB,mBAAZE,EACF,OAAOF,EAAIO,KAAI,SAAUC,GACvB,OAAOT,EAASS,EAAGP,MAIvB,GAAgB,oBAAZC,EACF,MAAM,IAAIO,MAAM,qBAKdR,GAAwBD,EAAIU,YACvBV,EAAIU,IAITV,EAAIU,aACCV,EAAIU,IAAIC,kBACRX,EAAIU,IAAIE,UAGjB,IACIC,EACAC,EACAC,EAHAC,EAAOb,OAAOa,KAAKhB,GAKvB,IAAKa,KAAOG,EACNA,EAAKC,eAAeJ,KACtBC,EAAQd,EAAIgB,EAAKH,IAGC,qBAFlBE,EAAYZ,OAAOC,UAAUC,SAASC,KAAKQ,KAEU,mBAAdC,IACrCf,EAAIgB,EAAKH,IAAQd,EAASe,GAAO,KAKvC,OAAOd,EAGT,IAAIkB,GAAgC,EACpC,SAASC,EAAcnB,GACrB,IAAIoB,EAAW5B,EAAUQ,GAEzB,GAAIJ,EAASwB,GACX,OAAOxB,EAASwB,GAGlB,IAAIC,EAAS9B,EAAMS,EAAK,CAAEkB,8BAA+BA,IACzD,IAAKG,GAA0B,aAAhBA,EAAOC,KACpB,MAAM,IAAIb,MAAM,iCASlB,OAHAY,EAAStB,EADTsB,EAzGF,SAA0BE,GAIxB,IAHA,IAfuBb,EAenBc,EAAiB,GACjBC,EAAc,GAETC,EAAI,EAAGA,EAAIH,EAAIE,YAAYE,OAAQD,IAAK,CAC/C,IAAIE,EAAqBL,EAAIE,YAAYC,GAEzC,GAAgC,uBAA5BE,EAAmBN,KAA+B,CACpD,IAAIO,EAAeD,EAAmBE,KAAKhB,MACvCiB,EAtBDvC,GADgBkB,EAuBakB,EAAmBlB,KAtBlCsB,OAAOC,KAAKC,UAAUxB,EAAIyB,MAAOzB,EAAI0B,MAyBlDvC,EAAkBoB,eAAeY,KAAkBhC,EAAkBgC,GAAcE,IAIjFjC,GACFuC,QAAQC,KAAK,+BAAiCT,EAAjC,iMAKfhC,EAAkBgC,GAAcE,IAAa,GAEnClC,EAAkBoB,eAAeY,KAC3ChC,EAAkBgC,GAAgB,GAClChC,EAAkBgC,GAAcE,IAAa,GAG1CP,EAAeO,KAClBP,EAAeO,IAAa,EAC5BN,EAAYc,KAAKX,SAGnBH,EAAYc,KAAKX,GAKrB,OADAL,EAAIE,YAAcA,EACXF,EAkEEiB,CAAiBnB,IACA,GAC1BzB,EAASwB,GAAYC,EAEdA,EAYT,SAASoB,IAQP,IAPA,IAAIC,EAAOC,MAAMvC,UAAUwC,MAAMtC,KAAKuC,WAElCC,EAAWJ,EAAK,GAGhBK,EAA+B,iBAAf,EAA2BD,EAAWA,EAAS,GAE1DpB,EAAI,EAAGA,EAAIgB,EAAKf,OAAQD,IAC3BgB,EAAKhB,IAAMgB,EAAKhB,GAAGJ,MAAyB,aAAjBoB,EAAKhB,GAAGJ,KACrCyB,GAAUL,EAAKhB,GAAGhB,IAAIsB,OAAOC,KAE7Bc,GAAUL,EAAKhB,GAGjBqB,GAAUD,EAASpB,GAGrB,OAAOP,EAAc4B,GAIvBN,EAAIO,QAAUP,EACdA,EAAIQ,YAzJJ,WACErD,EAAW,GACXC,EAAoB,IAwJtB4C,EAAIS,wBAvGJ,WACEpD,GAAwB,GAuG1B2C,EAAIU,oCAlCJ,WACEjC,GAAgC,GAkClCuB,EAAIW,qCA/BJ,WACElC,GAAgC,GAgClCmC,EAAOC,QAAUb","file":"npm.graphql-tag.fd5647aa181e29ae7e67.js","sourcesContent":["var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n"],"sourceRoot":""}